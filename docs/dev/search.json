[{"path":"/dev/articles/ExPanD_notebook.html","id":"exporting-a-notebook-from-within-expand","dir":"Articles","previous_headings":"","what":"Exporting a Notebook from within ExPanD","title":"Using the ExPanD Notebook function","text":"start ExPanD parameter export_nb_option = TRUE, can export R notebook containing current state analysis within ExPanD app. Let’s see works notebook offer. First, start ExPanD included panel data U.S. corporations option export notebooks. Next, scrolling bottom page clicking button ,  rewarded file download dialog, asking store file named ExPanD_nb.zip. Store unzip wherever like. contains two files notebook file ExPanD_nb_code.Rmd data file ExPanD_nb_data.RData containing data variable definitions.","code":"library(ExPanDaR)  ExPanD(df = russell_3000,          df_def = russell_3000_data_def,         df_name = \"Russell 3000\",        config_list = ExPanD_config_russell_3000,        export_nb_option = TRUE)"},{"path":"/dev/articles/ExPanD_notebook.html","id":"exploring-the-notebook-code","dir":"Articles","previous_headings":"","what":"Exploring the Notebook Code","title":"Using the ExPanD Notebook function","text":"Use RStudio open notebook file. can directly knit (Preview/Knit HTML) order work extend , useful take deeper look code first. first chunk silently loads required libraries sets knitting defaults. second chunk interesting: familiar yet R, might look little bit intimidating. Let’s explore step step. first large part code, starting create_sample ending several lines later closing curly bracket separate line defines function. function block code can take parameters returns object. function named create_sample : creates sample used analysis . see function called loading data command create_sample(nb_df, nb_df_def). Let’s look data passed function exploring function detail. loading \"ExPanD_nb_data.Rdata\", data frames nb_df nb_df_def environment. first contains raw data analysis long format. See: second data frame ? Let’s peak: data frame contains variable definitions defines ExPanD treat variables. type indicates cross-sectional (cs_id) time series (ts_id) identifiers well whether variables understood numeric, logical factor. can_be_na indicates whether ExPanD require variable NA. can_be_na set FALSE variable data missing certain observation ExPanD drops whole observation (row data frame) analysis. function create_sample now uses data frames prepare sample analysis. first sets non finite numerical values NA. Next, checks whether variables contain NA observations , variables present data frame, deletes . , observations NA values variables set can_be_na = FALSE deleted. Last, outlier treatment specified ExPanD app applied data calling ExPanDaR function treat_outliers(). default configuration used calling ExPanD specified data winsorized top bottom 1% percentile, meaning values top 1% bottom 1% set respective percentiles. data preparation steps modified data frames containing data definitions returned user, wrapped list object. last two commands store data frames smp smp_def. remaining code use data frames analysis. rest notebook much easier process. example, chunk  provides stacked bar chart ExPanD app.1 look histogram given variable (produced sixth chunk)  directly see effect winsorization data (Net Income divided average total assets case). chunks make use wrapper functions provided ExPanDaR package. one, fifth chunk uses prepare_descriptive_table() quickly produce standard descriptive statistics table. Descriptive Statistics See help pages functions vignette “Using functions ExPanDaR package” information use . Also, can always take look code (just call name without brackets) see hood extend modify .","code":"create_sample <- function(df, df_def) {   # Set infinite numerical variables to NA   df[, df_def$var_name[df_def$type == \"numeric\"]] <-     lapply(df[, df_def$var_name[df_def$type == \"numeric\"]],       function(x) ifelse(is.finite(x), x, NA))     # Delete numerical variables that only contain NAs   all_na_vars <- sapply(df, function (x) all(is.na(x)))   df_def <- df_def[!all_na_vars,]   df <- df[, df_def$var_name]     # Drop observations that are NA in variables that are not allowed to   df <- df[complete.cases(df[, df_def$var_name[which(df_def$can_be_na == FALSE)]]), ]     # Outlier treatment as requested in ExPanD()   nums <- df_def$var_name[df_def$type == \"numeric\"]   df[, nums] <- treat_outliers(df[, nums], 0.01, FALSE, NULL)     df <- droplevels(df)   return(list(df = df, df_def = df_def)) }   load(\"ExPanD_nb_data.Rdata\")   smp_list <- create_sample(nb_df, nb_df_def) smp <- smp_list$df smp_def <- smp_list$df_def kable(head(nb_df[, 1:7]), row.names = FALSE) kable(nb_df_def, row.names = FALSE) df <- smp df$period <- as.factor(df$period) df$sector <- as.factor(df$sector) p <- ggplot(df, aes(x = period)) +   geom_bar(aes(fill= sector), position = \"stack\") +   labs(x = \"period\", fill = \"sector\") p var <- as.numeric(smp$nioa) hist(var, main=\"\", xlab = \"nioa\", col=\"red\", right = FALSE, breaks= 150) df <- smp t <- prepare_descriptive_table(smp) t$kable_ret  %>%   kable_styling(\"condensed\", full_width = F, position = \"center\")"},{"path":"/dev/articles/ExPanD_notebook.html","id":"modifying-and-extending-the-notebook","dir":"Articles","previous_headings":"","what":"Modifying and Extending the Notebook","title":"Using the ExPanD Notebook function","text":"Now understood notebook set , relatively easy modify notebook extend analysis without using ExPanD. example: chunk notebook prepares scatter plot return relative net income.  Let’s assume addition want see cash flows operations relate stock returns. Easy! Just replace \"nioa\", name net income variable \"cfoa\", name cash flow operations variable.  Looks similar, right? Now set. Feel free modify extend analysis along possible dimensions. Code away enjoy!","code":"df <- smp df <- df[, c(\"coid\", \"coname\", \"period\", \"nioa\", \"return\", \"sector\", \"toas\")] df <- df[complete.cases(df), ] df$sector <- as.factor(df$sector) prepare_scatter_plot(df, \"nioa\", \"return\", color = \"sector\", size = \"toas\", loess = 1) ## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' df <- smp df <- df[, c(\"coid\", \"coname\", \"period\", \"cfoa\", \"return\", \"sector\", \"toas\")] df <- df[complete.cases(df), ] df$sector <- as.factor(df$sector) prepare_scatter_plot(df, \"cfoa\", \"return\", color = \"sector\", size = \"toas\", loess = 1) ## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"/dev/articles/ExPanDaR-functions.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Using the functions of the ExPanDaR package","text":"ExPanDaR designed exploratory panel data analysis (hence name). Thus, can also use functions cross-sectional data, functions need data frame containing panel data. ExPanDaR expects data organized long format. implies observation (row) identified cross-sectional time series identifiers variables organized columns. can vector variables jointly determining cross-section, time-series needs identified unique variable. ExPanDaR functions treat cross-sectional identifiers factors expect time-series identifier coercible ordered factor. walk-use data set russell_3000, comes package. contains financial reporting stock return data Russell 3000 firms Google Finance Yahoo Finance collected using tidyquant package summer 2017. word caution: data appears relatively decent quality advise using data scientific work without verifying integrity first. variables included data. can infer variable definition coid seems identify cross-section (Russell 3000 firm) period identifies time-series (fiscal year). addition, coname also sounds like mighty identify firm sure whether duplicate company names. addition, want verify duplicate coid/period pairs. Let’s check. first test verifies two observations share coid different coname. second makes sure firms coname different coid. Thus, can use , coname coid, either cross-sectional identifier. following test establishes whether combination coid period identify panel observation. seems case. next step, let’s use ExPanDaR’s function prepare_missing_values_graph() eyeball frequently observations missing data set.  OK. look bad. FY2013 seems odd, variables completely missing. Guess ? calculated using lagged values total assets. , following, let’s focus variables care fiscal years 2014 2016 (short panel, know). Time check descriptive statistics using prepare_descriptive_table() function. Descriptive Statistics Take look minima maxima variables (e.g., net income assets (nioa)). Normally, around -50 % + 50%. measure minimum way -50 %. One thing comes handy dealing outliers quick way observe extreme values. prepare_ext_obs_table() might helpful . real life research situation, might want take break check data well actual financial statements see going . cases, see outliers caused small denominators (average total assets case). reduce effect outliers analysis, can winsorize (truncate) using treat_outliers() function.","code":"kable(data.frame(Variable=russell_3000_data_def$var_name,                   Definition=sub('$', '\\\\$', russell_3000_data_def$var_def, fixed = TRUE)),        row.names = FALSE) cs_ids <- unique(russell_3000[,c(\"coid\", \"coname\")]) identical(cs_ids$coid, unique(russell_3000$coid)) ## [1] TRUE identical(cs_ids$coname, unique(russell_3000$coname)) ## [1] TRUE any(duplicated(russell_3000[,c(\"coid\", \"period\")])) ## [1] FALSE prepare_missing_values_graph(russell_3000, ts_id = \"period\") ## Warning: `gather_()` was deprecated in tidyr 1.2.0. ## ℹ Please use `gather()` instead. ## ℹ The deprecated feature was likely used in the ExPanDaR package. ##   Please report the issue at <https://github.com/trr266/ExPanDaR/issues>. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. r3 <- droplevels(russell_3000[russell_3000$period > \"FY2013\",                               c(\"coid\", \"coname\", \"period\", \"sector\", \"toas\",                                 \"nioa\", \"cfoa\", \"accoa\", \"return\")]) t <- prepare_descriptive_table(r3) t$kable_ret  %>%   kable_styling(\"condensed\", full_width = F, position = \"center\") t <- prepare_ext_obs_table(na.omit(r3[c(\"coname\", \"period\", \"nioa\")])) t$kable_ret %>%   kable_styling(\"condensed\", full_width = F, position = \"center\") r3win <- treat_outliers(r3, percentile = 0.01) t <- prepare_ext_obs_table(na.omit(r3win[c(\"coname\", \"period\", \"nioa\")])) t$kable_ret %>%   kable_styling(\"condensed\", full_width = F, position = \"center\")"},{"path":"/dev/articles/ExPanDaR-functions.html","id":"descriptive-statistics","dir":"Articles","previous_headings":"","what":"Descriptive Statistics","title":"Using the functions of the ExPanDaR package","text":"looks better. Let’s look winsorized descriptive statistics. Descriptive Statistics sure won’t care big fan correlation tables. prepare_correlation_table() prepares table reporting Pearson correlations Spearman correlations diagonal. fact, like correlations much especially samples containing many variables use prepare_correlation_graph() display graphic variant based corrplot package. See .","code":"t <- prepare_descriptive_table(r3win) t$kable_ret  %>%   kable_styling(\"condensed\", full_width = F, position = \"center\") t<- prepare_correlation_table(r3win, bold = 0.01, format=\"html\") t$kable_ret %>%   kable_styling(\"condensed\", full_width = F, position = \"center\") ret <- prepare_correlation_graph(r3win)"},{"path":"/dev/articles/ExPanDaR-functions.html","id":"visuals","dir":"Articles","previous_headings":"","what":"Visuals","title":"Using the functions of the ExPanDaR package","text":"Additional visuals available exploring time trends. prepare_trend_graph() can used comparing variables…  … eyeballing distributional properties single variable time prepare_quantile_trend_graph().  Nothing special going (really surprising, given short time span sample covers). Let’s see profitability varies across sectors using theprepare_by_group_trend_graph() function.  health sector clearly less profitable compared others, can explained small growing firms. Finally, prepare_scatter_plot() produces mother plots, scatter plot.  see structural break around nioa == 0? Researchers area accounting tend like kind stuff.","code":"graph <- prepare_trend_graph(r3win[c(\"period\", \"nioa\", \"cfoa\", \"accoa\")], \"period\") graph$plot graph <- prepare_quantile_trend_graph(r3win[c(\"period\", \"return\")], \"period\", c(0.05, 0.25, 0.5, 0.75, 0.95)) graph$plot graph <- prepare_by_group_trend_graph(r3win, \"period\", \"sector\", \"nioa\") graph$plot prepare_scatter_plot(r3win, x=\"nioa\", y=\"return\", color=\"sector\", size=\"toas\", loess = 1) ## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"/dev/articles/ExPanDaR-functions.html","id":"regression-tables","dir":"Articles","previous_headings":"","what":"Regression Tables","title":"Using the functions of the ExPanDaR package","text":"Finally, happen fan starred numbers, can also quickly produce regression tables using function prepare_regression_table() calls lfe::felm() OLS glm() binary logit models. tables constructed calling stargazer::stargazer(), allowing plain text, html latex output. can construct tables mixing different models… … applying one model different sub-samples.","code":"dvs <- c(\"return\", \"return\", \"return\", \"return\", \"return\", \"return\") idvs <- list(c(\"nioa\"),               c(\"cfoa\"),               c(\"accoa\"),               c(\"cfoa\", \"accoa\"),               c(\"nioa\", \"accoa\"),               c(\"nioa\", \"accoa\"))  feffects <- list(\"period\", \"period\", \"period\",                   c(\"coid\", \"period\"), c(\"coid\", \"period\"), c(\"coid\", \"period\")) clusters <- list(\"\", \"\", \"\", \"coid\", \"coid\", c(\"coid\", \"period\")) t <- prepare_regression_table(r3win, dvs, idvs, feffects, clusters) htmltools::HTML(t$table) t <- prepare_regression_table(r3win, \"return\", c(\"nioa\", \"accoa\"), byvar=\"period\") htmltools::HTML(t$table)"},{"path":"/dev/articles/ExPanDaR-functions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using the functions of the ExPanDaR package","text":"(currently). functions rather simple wrappers around established R functions. can easily modified fit needs taste. Take look github repository ExPanDaR package code. fun!","code":""},{"path":"/dev/articles/customize_ExPanD.html","id":"select-components-to-include-and-their-order","dir":"Articles","previous_headings":"","what":"Select components to include and their order","title":"Customize ExPanD","text":"start ExPanD default mode, e.g., ExPanD include available components default order: select components want display, two options: First, can simply indicate components want omit. remaining components stay original order. example, ‘gapminder’ data set missing values balanced sample. mean can safely omit sample selection component well display missing values. Alternatively, can choose components want include. also gives option sort components preferred order. Let us assume want app focus Preston curve association GDP per capita life expectancy ‘gapminder’ data. maybe want include following components: OK. , can also include informative title short intro sentence.","code":"library(ExPanDaR) library(gapminder)  ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\") library(ExPanDaR) library(gapminder) data(gapminder)  ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\",         components = c(sample_selection = FALSE, missing_values = FALSE)) library(ExPanDaR) library(gapminder) data(gapminder)  ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\",         components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                        regression = TRUE)) library(ExPanDaR) library(gapminder) data(gapminder)  ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\",         title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                        regression = TRUE))"},{"path":"/dev/articles/customize_ExPanD.html","id":"add-variable-definitions","dir":"Articles","previous_headings":"","what":"Add variable definitions","title":"Customize ExPanD","text":"look descriptive table see offer self-explanatory variable names. Also, tool-tips displayed hover variable names mouse. add tool-tip functionality, need specify df_def data frame describes variables. upside longer need specify cross-sectional time series identifiers also defined data frame Now tool-tips descriptive table inform variables. Neat.","code":"library(ExPanDaR) library(gapminder) data(gapminder)  df_def <- data.frame(   var_name = names(gapminder),   var_def = c(\"Name of the country\",               \"Continent where country is located\",               \"Year of data\",               \"Life expectancy in years at birth\",               \"Population in million\",               \"Gross Domestic Product (GDP) per capita\"),   type = c(\"cs_id\", \"factor\", \"ts_id\", rep(\"numeric\", 3)) )  gapminder$pop <- gapminder$pop / 1e6  ExPanD(df = gapminder,        title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        quantile_trend_graph = TRUE,                        scatter_plot = TRUE,                        regression = TRUE),        df_def = df_def)"},{"path":"/dev/articles/customize_ExPanD.html","id":"customize-components-so-that-they-display-certain-variables-and-specifications","dir":"Articles","previous_headings":"","what":"Customize components so that they display certain variables and specifications","title":"Customize ExPanD","text":"scroll components see scatter plot showing typical Preston curve default. want change scatter plot based full sample includes LOESS line. show GDP per capita X life expectancy Y, population defining size data points continent color. Also, want estimate panel model life expectancy country year firm fixed effects, two-way clustered standard errors GDP per capita explanatory variable (Population time constant ‘gapminder’ data set subsumed country fixed effects). two ways achieve , simple one hard one. First, simple one: Make desired changes app, save configuration app file can remember (button towards bottom page), read file readRDS() environment provide resulting list parameter config_list ExPanD() function call. , assume saved configuration app my_config.RDS working directory. Now hard one. can specify changes want apply default configuration directly code. Take look clist understand data structured. hope list member names somewhat self explanatory. Now customized components well documented code. scatter plot exhibits Preston curve. association non-linear, potentially explaining negative coefficient panel model. Maybe want allow user address issue --fly defining additional variables?","code":"library(ExPanDaR) library(gapminder) data(gapminder)  df_def <- data.frame(   var_name = names(gapminder),   var_def = c(\"Name of the country\",               \"Continent where country is located\",               \"Year of data\",               \"Life expectancy in years at birth\",               \"Population in million\",               \"Gross Domestic Product (GDP) per capita\"),   type = c(\"cs_id\", \"factor\", \"ts_id\", rep(\"numeric\", 3)) )  gapminder$pop <- gapminder$pop / 1e6  clist <- readRDS(\"my_config.RDS\")  ExPanD(df = gapminder,        title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                        regression = TRUE),        df_def = df_def,        config_list = clist) library(ExPanDaR) library(gapminder) data(gapminder)  df_def <- data.frame(   var_name = names(gapminder),   var_def = c(\"Name of the country\",               \"Continent where country is located\",               \"Year of data\",               \"Life expectancy at birth, in years\",               \"Population in million\",               \"Gross Domestic Product (GDP) per capita in US-$, inflation-adjusted\"),   type = c(\"cs_id\", \"factor\", \"ts_id\", rep(\"numeric\", 3)),   stringsAsFactors = FALSE )  gapminder$pop <- gapminder$pop / 1e6  clist <- list(   scatter_x = \"gdpPercap\",   scatter_y = \"lifeExp\",   scatter_size = \"pop\",   scatter_color = \"continent\",   scatter_loess = TRUE,   scatter_sample = FALSE,      reg_y = \"lifeExp\",   reg_x = \"gdpPercap\",   reg_fe1 = \"country\",   reg_fe2 = \"year\",   cluster = \"4\" # Now this is hard to guess    # 1: none, 2: first FE, 3: second FE, 4: both FE )  ExPanD(df = gapminder,        title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                        regression = TRUE),        df_def = df_def,        config_list = clist)"},{"path":"/dev/articles/customize_ExPanD.html","id":"allow-users-to-generate-additional-variables","dir":"Articles","previous_headings":"","what":"Allow users to generate additional variables","title":"Customize ExPanD","text":"can achieved adding component udvars. generates another component app allowing user define additional variables. positioned just scatter plot. fun jiggles, can define logGpdPercap <- log(gdpPercap) verify using scatter plot using log-transformed explanatory variable makes association linear, reflecting also now positive coefficient regression model. worry security, code passed server via user variable definition component sandboxed sense includes variables sample functions listed help text component. Time move finishing touches.","code":"library(ExPanDaR) library(gapminder) data(gapminder)  df_def <- data.frame(   var_name = names(gapminder),   var_def = c(\"Name of the country\",               \"Continent where country is located\",               \"Year of data\",               \"Life expectancy in years at birth\",               \"Population in million\",               \"Gross Domestic Product (GDP) per capita\"),   type = c(\"cs_id\", \"factor\", \"ts_id\", rep(\"numeric\", 3)),   stringsAsFactors = FALSE )  gapminder$pop <- gapminder$pop / 1e6  clist <- list(   scatter_x = \"gdpPercap\",   scatter_y = \"lifeExp\",   scatter_size = \"pop\",   scatter_color = \"continent\",   scatter_loess = TRUE,   scatter_sample = FALSE,      reg_y = \"lifeExp\",   reg_x = \"gdpPercap\",   reg_fe1 = \"country\",   reg_fe2 = \"year\",   cluster = \"4\" # No this is hard to guess 1: none, 2: first FE, 3: second FE, 4: both FE )  ExPanD(df = gapminder,        title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                        udvars = TRUE,                       regression = TRUE),        df_def = df_def,        config_list = clist)"},{"path":"/dev/articles/customize_ExPanD.html","id":"add-html-blocks-to-support-the-flow-of-your-app","dir":"Articles","previous_headings":"","what":"Add html blocks to support the flow of your app","title":"Customize ExPanD","text":"time time might useful include additional text info components. , option include arbitrary number HTML blocks additional components. html block wrapped fluid row, can use columns similar shiny. . Now customized version ExPanD focusing communicating robustness Preston Curve. want run code , can take quick look customized version . want take customization next level, can always fork code ‘ExPanDaR’ package GitHub. code shiny app inst/app folder package. Enjoy.","code":"library(ExPanDaR) library(gapminder) data(gapminder)  df_def <- data.frame(   var_name = names(gapminder),   var_def = c(\"Name of the country\",               \"Continent where country is located\",               \"Year of data\",               \"Life expectancy in years at birth\",               \"Population in million\",               \"Gross Domestic Product (GDP) per capita\"),   type = c(\"cs_id\", \"factor\", \"ts_id\", rep(\"numeric\", 3)),   stringsAsFactors = FALSE )  gapminder$pop <- gapminder$pop / 1e6  clist <- list(   scatter_x = \"gdpPercap\",   scatter_y = \"lifeExp\",   scatter_size = \"pop\",   scatter_color = \"continent\",   scatter_loess = TRUE,   scatter_sample = FALSE,      reg_y = \"lifeExp\",   reg_x = \"gdpPercap\",   reg_fe1 = \"country\",   reg_fe2 = \"year\",   cluster = \"4\" # No this is hard to guess 1: none, 2: first FE, 3: second FE, 4: both FE )  html_blocks <- c(   paste('<div class=\"col-sm-2\"><h3>Variation of life expectancy',         \"across regions and income levels<\/h3><\/div>\",         '<div class=\"col-sm-10\">',         \"<p>&nbsp;<\/p>As you see below, life expectancy varies widely\",         \"across countries and continents. One potential reason for this\",         \"variation is the difference in income levels across countries.\",         \"This association is visualized by the\",         \"<a href=https://en.wikipedia.org/wiki/Preston_curve>\",         \"Preston Curve<\/a> that you also find below.\",         \"<\/div>\"),   paste('<div class=\"col-sm-2\"><h3>Transform variables<\/h3><\/div>',          '<div class=\"col-sm-10\">',         \"The Preston Curve is far from\",         \"linear. Maybe you can come up with a transformation\",         \"of GDP per capita that makes the association\",         \"a little bit more well behaved?\",         \"Use the dialog below to define a transformed\",         \"measure of GDP per capita and assess its association\",         \"with life expectancy in the scatter plot above.\",         \"<\/div>\"),   paste('<div class=\"col-sm-2\"><h3>Assess Robustness<\/h3><\/div>',         '<div class=\"col-sm-10\">',         \"You see below that the linear regression coefficient\",         \"for GDP per capita is <i>negative<\/i>\",         \"and signficant in a panel model with country and year\",         \"fixed effects.\",         \"Does this also hold when you use a log-transformed version\",         \"of GDP per capita?\",         \"<\/div>\") )  ExPanD(df = gapminder,        title = \"Explore the Preston Curve\",        abstract = paste(\"This interactive display uses 'gapminder' data to\",                         \"let you explore the Preston Curve. Scroll down and enjoy!\"),        components = c(descriptive_table = TRUE,                        html_block = TRUE,                       by_group_violin_graph = TRUE,                        scatter_plot = TRUE,                       html_block = TRUE,                       udvars = TRUE,                       html_block = TRUE,                       regression = TRUE),        df_def = df_def,        config_list = clist,        html_blocks = html_blocks)"},{"path":"/dev/articles/use_ExPanD.html","id":"starting-expand-to-upload-a-local-file-containing-panel-data","dir":"Articles","previous_headings":"","what":"Starting ExPanD to upload a local file containing panel data","title":"Using ExPanD for Panel Data Exploration","text":"easiest way start using ExPanD use local data file containing panel data. ExPanD supports Stata, SAS, CSV, Excel R file formats. using ExPanD within R, install ExPanDaR package start ExPanD. Alternatively, can simply access online hosted version ExPanD app (R required). starting ExPanD, greeted bare bones file upload dialog.  Now need file explore. Feel free use whatever want first use case use well-known gapminder dataset provided gapminder package (click know gapminder initiative). use ExPanD, need following: panel dataset long format least two numerical variables without duplicate observations (identified cross-sectional time-series dimension), variable vector variables within dataset identifies cross-sectional dimension variable coercible ordered factor identifies (sorts) time dimension panel. see, gapminder file contains country-year data. organized long format using country cross-sectional identifier year time-series identifier. additional variables stored separate column. one factor (continent) three numerical variables (lifeExp, pop gdpPercap). , complies requirements, assuming duplicates: OK. Use commented-write.csv() function call save CSV file system file dialog load ExPanD (using R, can download CSV file ). uploading file, two dialog boxes appear asking select cross-sectional identifier(s) time-series identifier.  Select country cross-sectional identifier year time-series identifier. ExPanD now process data display can start exploring.","code":"devtools::install_github(\"trr266/ExPanDaR\") library(ExPanDaR)  ExPanD() library(gapminder) # write.csv(gapminder, file = \"gapminder.csv\", row.names = FALSE) head(gapminder, 10) #> # A tibble: 10 × 6 #>    country     continent  year lifeExp      pop gdpPercap #>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl> #>  1 Afghanistan Asia       1952    28.8  8425333      779. #>  2 Afghanistan Asia       1957    30.3  9240934      821. #>  3 Afghanistan Asia       1962    32.0 10267083      853. #>  4 Afghanistan Asia       1967    34.0 11537966      836. #>  5 Afghanistan Asia       1972    36.1 13079460      740. #>  6 Afghanistan Asia       1977    38.4 14880372      786. #>  7 Afghanistan Asia       1982    39.9 12881816      978. #>  8 Afghanistan Asia       1987    40.8 13867957      852. #>  9 Afghanistan Asia       1992    41.7 16317921      649. #> 10 Afghanistan Asia       1997    41.8 22227415      635. any(duplicated(gapminder[,c(\"country\", \"year\")])) #> [1] FALSE"},{"path":"/dev/articles/use_ExPanD.html","id":"starting-expand-with-a-data-frame-containing-panel-data","dir":"Articles","previous_headings":"","what":"Starting ExPanD with a data frame containing panel data","title":"Using ExPanD for Panel Data Exploration","text":"Alternatively, using R can bypass file upload dialog specifying data frame cross-sectional well time-series identifiers.","code":"devtools::install_github(\"trr266/ExPanDaR\") library(ExPanDaR) library(gapminder)  ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\")"},{"path":"/dev/articles/use_ExPanD.html","id":"exploring-data","dir":"Articles","previous_headings":"","what":"Exploring data","title":"Using ExPanD for Panel Data Exploration","text":"Regardless whether uploaded gapminder data via file dialog specified data frame ExPanD() function call, ExPanD shiny app start look like .  can seen bar chart, gapminder dataset provides balanced panel 142 countries 12 observations per country. missing values graph shows missing data across variables. scroll , see dataset contains three numerical variables. Play around histogram extreme observation table learn . time trend graph quantile time trend communicate good news: life expectancy increasing time world-wide. can verify holds true population sample countries GDP per capita. also notice latter two cross-country distribution widens time. gapminder dataset often used document strong positive association GDP per capita life expectancy. can see association correlation plot. blue ellipsoid () diagonal visualizes positive Pearson (Spearman) correlation two variables. interested exact correlation values, hover ellipsoid mouse. scatter plot regression analysis section allow explore association little bit detail. see screenshot prepared “Hans Rosling” scatter plot (click know name). addition, estimated region OLS model country fixed effects standard errors clustered country verify association just driven unobservable time-constant country heterogeneity.  Looking scatter plot notice observations extremely high GDP per capita trigger LOESS smoother line get negative slope. hover dots mouse see observations Kuwait. extent regression results affected extreme observations? figure , scroll select winsorize data 1 % level. , figure now looks like .  association become robust across regions scatter plot now shows positive association across complete range winsorized GDP per capita. Continue play around data. Let us assume point find something consider worth preserving next time start ExPanD gapminder dataset, starts directly view just . problem! Just scroll bottom page. , find save dialog (load dialog well, just case). Save ExPanD choices place remember. file stored plain list, saved RDS file. Assuming named file “ExPanD_config.RDS” stored current work directory, can now start ExPanD right favorite analysis providing list.","code":"ExPanD_config <- readRDS(\"ExPanD_config.RDS\") ExPanD(df = gapminder, cs_id = \"country\", ts_id = \"year\", config_list = ExPanD_config)"},{"path":"/dev/articles/use_ExPanD.html","id":"defining-additional-variables","dir":"Articles","previous_headings":"","what":"Defining additional variables","title":"Using ExPanD for Panel Data Exploration","text":"gapminder dataset contains three numerical variables. might wonder association GDP per capita life expectancy look like include additional test control variables. addition, GDP per capita, metric affected growth processes, far normally distributed. association life expectancy hold log transform ? Time second use case re-examines presented association using data provided World Bank. questions last paragraph typical exploratory data analysis workflows ExPanD equipped handle . started “advanced mode”, provides two samples: base sample analysis sample. can define additional variables based base sample interactively. call ExPanD without options, start advanced mode, generating analysis sample identical sample uploaded. start ExPanD providing data frame command line, decide whether want use “simple” “advanced” mode. prepare data frame containing variable definitions via var_def parameter, ExPanD start advanced mode. variable definition file contain least three character columns: var_name, var_def type. addition, can contain logical column can_be_na. Let’s take look variable definition data frame worldbank dataset provided ExPanDaR package. var_name contains variable names analysis sample var_def contains definitions variables. definitions refer variables contained worldbank dataset (conforming naming convention World Bank). definitions just simple 1:1 transformations worldbank dataset , can see definition time, can also use standard R expressions within scope worldbank data frame. R experts: definition evaluated within dplyr::mutate() call base data frame grouped cross section ordered time-series identifier, example lead() lag() work expected. type variable specify nature variable just defined. Possible values cs_id, ts_id, numeric, logical, factor. identify cross-sectional identifier(s), time-series identifier, numerical variables, Boolean (True/False) type variables, variables treated grouping factors. Note data according class coercible . can_be_na variable can omitted. provide , set TRUE variables besides cross-sectional time-series identifiers. worldbank_var_def data frame set FALSE variables time, gdp, population, gpd_capita, meaning observations non-missing values variables included analysis dataset. customizing data frame provide ExPanD() via var_def parameter, can design analysis sample wish. alternative interactive approach define variables interactively running ExPanD(). Let’s try. Run following code start ExPanD worldbank base data advanced mode. see similar analysis gapminder analysis first use case extensive dataset. scatter plot regression analysis displayed .  shows positive association GDP per capita life expectancy controlling public spending health income inequality (happens negatively associated life expectancy). see table, number observations 1,068. reconcile roughly 8,500 observations World Bank sample data ? quick look missing values graph helps understand issue.  gdp_capita available observations (remember can_be_na variable data definition data frame?) life_expectancy good coverage recent years, pubspend_health_gdp giniindex available later years sample. giniindex also available subset countries. Taken together, drastically reduces sample size regression model. Explore whether effect documented associations excluding including test variables one--one. see associations reasonable robust. Now let’s see whether distributional properties main independent variable interest impact association. screenshot displays histogram gdp_capita.  looks like log-normal distributed variable, log transformation yield normally distributed variable. calculate logged variant gdp_capita first need find World Bank data item gdp_capita based . Hovering mouse variable name descriptive sample, see based data item NY.GDP.PCP.KD. switch tab descriptive statistics base sample, can see 72 base data items worldbank dataset contains. Use dialog descriptive statistics shown calculate log-transformed measure GDP per capita.  see message window variable successfully generated. histogram look like?  Better. Now let’s see new variable associated life expectancy. First quick look scatter plot.  Now looks different gapminder plot section exhibits linear association. Let’s see regression model looks like use log_gdp_capita instead gdp_capita.  logged version GDP per capita remains robustly positively associated life expectancy now income inequality (measured giniindex) marginally associated life expectancy. Another thing one can notice scatter plot country appears “trajectory” terms life expectancy development. also know countries periods GDP per capita increases time: Can sure association GDP per capita life expectancy different general time trend data? , find scatter plot uses time independent variable.  can see countries, life expectancy seems follow robust similar linear time trend. exceptions rule (China, Mali, Rwanda, Sierra Leone). infer whether association “survives” control time-induced variance life expectancy stable across countries, estimate regression model includes country year fixed effects. See .  associations gone. Fun fact: replace lag_gdp_capita gdp_capita see ’s coefficient even turns significantly negative meaning increasing GDP per capita associated decrease life expectancy! Please keep mind meant challenge common believes health economics epidemiology merely presented use case interactive data exploration infer robustness statistical inference.","code":"head(worldbank_var_def, 10) #>           var_name                             var_def    type can_be_na #> 1          country                             country   cs_id         0 #> 2           region                              region  factor         0 #> 3           income                              income  factor         0 #> 4             year                                year   ts_id         0 #> 5             time as.numeric(as.character(year))-1960 numeric         0 #> 6              gdp                      NY.GDP.MKTP.KD numeric         0 #> 7       population                         SP.POP.TOTL numeric         0 #> 8       gdp_capita                      NY.GDP.PCAP.KD numeric         0 #> 9      extdebt_gni                   DT.DOD.DECT.GN.ZS numeric         1 #> 10 debtservice_gni                   DT.TDS.DPPG.GN.ZS numeric         1 library(ExPanDaR)  ExPanD(df = worldbank,         df_def = worldbank_data_def,        var_def = worldbank_var_def,        config_list = ExPanD_config_worldbank)"},{"path":"/dev/articles/use_ExPanD.html","id":"using-expand-with-multiple-samples","dir":"Articles","previous_headings":"","what":"Using ExPanD with multiple samples","title":"Using ExPanD for Panel Data Exploration","text":"instances might want explore several samples simultaneously. Two examples: analyzing observational data data available alternative data sources. interested learn whether data different data sources generate insights. want use exploratory data analysis develop predictive model. need test predictive model sample. , split original sample training test dataset. third final use case build second motivation. , explore test association key finding area research work: financial accounting capital markets. want bore details essence topic explore concurrent association financial reporting measures corporate performance stock market returns. Prior research documented financial reporting performance measures, prominently net income, robust overall weak association concurrent stock market returns. Net income can broken two components: Cash flow operations total accruals. former essentially captures net cash receipts company realizes year outcome operating business activities, latter reflects financial accounting adjustments reflect timing disparities economic activities cash collection. Two examples total accruals: company sells goods customer period 1 collect cash revenue period 2. results positive accrual period 1 negative accrual period 2. company buys pays inventory period 1, uses production period 2, sells goods cash period 3. , positive accrual (adjusting negative cash flow operations) period 1 negative accrual period 3. Generously glossing many important details, accounting literature documented three key findings around notion: , cash flows operations total accruals, associated concurrent stock returns Cash flows operations stronger association returns total accruals stock market seems miss-price accruals meaning puts much weight accruals incorporating net income news stock prices. revisit second statement. , use dataset russell_3000 included ExPanDaR package. capital market based research uses data commercial data vendors, requiring researchers obtain costly license. circumvent barrier open science, collect data publicly available APIs (Yahoo Google Finance) using tidyquant package. sample comprises available data sample U.S. listed firms members Russell 3000 index 2017. data less provided tidyquant used illustrative purposes . explore data test model data, split russell_3000 two equally sized randomly selected samples: “training sample” “test sample”. idea explore training sample infer significance association test test sample. Run following generate two samples start ExPanD . ExPanD starts displaying training sample. can infer bar chart descriptive table, russell_3000 dataset contains short unbalanced panel four years 2,289 firms. Also, varying amounts missing data across variables dataset variables containing values first fiscal year sample. hover mouse variable names descriptive table tool-tip present hopefully informative variable definitions. variable definitions come ? take look ExPanD() function call, notice df_def parameter. points data frame provided ExPanDaR package provides variable definitions. variables interested return (annual stock market return dependent variable), nioa (net income, deflated average total assets), cfoa (cash flow operations, deflated average total assets) accoa (total accruals, deflated average total assets). explore level association, suggest start analyzing scatter plot cash flow returns. notice , , extreme observations relatively influential. Limit influence winsorizing 1 % 99 % percentile. , get image looks like screenshot .  seems predicted positive association, although relatively weak mostly confined positive cash flows. Let’s see association looks like accruals picture .  robust association visible . test whether two associations indeed differ, set regression model using fact \\(nioa = cfoa + accoa\\). can test significant differences association regressing returns net income accruals. coefficient accruals turns significantly negative, found evidence association accruals returns significantly weaker association cash flow returns. order control unobserved time-constant factors drive stock market returns vary firm level, include firm fixed effects analysis. figure shows findings training sample.  find marginally significant coefficient \\(accoa\\) , discussed , base inferences training sample since used sample explore data. example, (admittedly ad hoc) decision winsorize data based visual inspection scatter plot. strict sense, violates usage data testing. , scroll , switch sample test sample see find.  screenshot shows, find significant coefficient \\(accoa\\). indicates predicted difference associations statistically significant conventional levels. might driven relatively low power test (short panel cross-sectional fixed effects), encourage use ExPanD explore finding . easily notice depending exactly specify test (fixed effect structures, standard error clustering, etc.) whether/cut training test sample, able generate findings “statistically significant conventional levels”. , , use case ExPanD demonstrates app can used assess robustness statistical inference.","code":"library(ExPanDaR) set.seed(42) training_sample <- sample(nrow(russell_3000), round(.5*nrow(russell_3000))) test_sample <- setdiff(1:nrow(russell_3000), training_sample)  ExPanD(df = list(russell_3000[training_sample, ], russell_3000[test_sample, ]),        df_def = russell_3000_data_def,        df_name = c(\"Training sample\", \"Test sample\"))"},{"path":"/dev/articles/use_ExPanD.html","id":"making-expand-available-to-users-without-providing-them-raw-data-access","dir":"Articles","previous_headings":"","what":"Making ExPanD available to users without providing them raw data access","title":"Using ExPanD for Panel Data Exploration","text":"many instances, researcher want provide readers, editors /reviewers opportunity assess robustness findings unable provide underlying data data subject commercial licensing usage restrictions. uploading ExPanD instance public server, can make results accessible without sharing data. shiny apps can hosted dedicated servers, easily achieved. Maybe noticed “Publish” icon top-right corner ExPanD window. Click learn options. example, can access ExPanD-based extension current working paper team .","code":""},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joachim Gassen. Author, maintainer.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gassen J (2025). ExPanDaR: Explore Data Interactively. R package version 0.5.3.9000, https://trr266.github.io/ExPanDaR/.","code":"@Manual{,   title = {ExPanDaR: Explore Your Data Interactively},   author = {Joachim Gassen},   year = {2025},   note = {R package version 0.5.3.9000},   url = {https://trr266.github.io/ExPanDaR/}, }"},{"path":[]},{"path":"/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Explore Your Data Interactively","text":"visiting github repository ExPanDaR (Explore Panel Data R) package. ExPanDaR provides code base ExPanD web app. ExPanD shiny based app supporting interactive exploratory data analysis. ExPanD two purposes: Provide toolbox researchers explore data fly, now also allowing download R notebook code reflects analysis. Enable users assess robustness empirical evidence without providing access underlying data. hope ExPanD particularly helpful academic review, publication replication process also think convenient typical exploratory data analysis workflows. addition, already proven helpful classroom. ExPanD looks like:  interested see ExPanD offer without diving R, click explore instance ExPanD hosts World Bank data click financial accounting stock returns dataset U.S. firms. see ExPanD can customized, take look blog post generates display development fuel economy U.S. car market. want analyze data instead, can also access variant ExPanD app allows user-side data uploads. worries: data won’t stored server get erased memory soon close web connection.","code":""},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explore Your Data Interactively","text":"full treat want test ExPanD within R, run following R session install ExPanDaR package CRAN. , want install current development version Github:","code":"install.packages(\"ExPanDaR\") library(ExPanDaR) if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"trr266/ExPanDaR\") library(ExPanDaR)"},{"path":"/dev/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Explore Your Data Interactively","text":"can either start ExPanD without arguments starts file upload dialog… …use explore cross-sectional data frame least two numeric variables… …start one two example datasets come package understand hot use long-format panel data. Please note: last parameter (export_nb_option) allows user download notebook data continue analysis R. Maybe best idea hosting app publicly want keep data private. additional information use ExPanD can found code file ExPanDaR_examples.R root directory.","code":"ExPanD() ExPanD(mtcars) ExPanD(df = worldbank,          df_def = worldbank_data_def,         var_def = worldbank_var_def,        df_name = \"World Bank Data\",        config_list = ExPanD_config_worldbank,        export_nb_option = TRUE)  ExPanD(df = russell_3000,          df_def = russell_3000_data_def,         df_name = \"Russell 3000\",        config_list = ExPanD_config_russell_3000,        export_nb_option = TRUE)"},{"path":"/dev/index.html","id":"use-expandar-functions-in-your-own-eda-workflow","dir":"","previous_headings":"","what":"Use ExPanDaR functions in your own EDA workflow","title":"Explore Your Data Interactively","text":"Besides providing ExPanD app, ExPanDaR comes set functions might helpful exploratory data analysis workflow, e.g., functions quickly produce standard tables plots. See vignette quick walk-trough.","code":""},{"path":"/dev/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further Information","title":"Explore Your Data Interactively","text":"information, please refer articles function call references package documentation, available CRAN version current development version. Enjoy!","code":""},{"path":"/dev/reference/ExPanD.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore Your Data (ExPanD) — ExPanD","title":"Explore Your Data (ExPanD) — ExPanD","text":"shiny based web app uses ExPanDaR functionality interactive data exploration. Designed long-form panel data works simple cross-sectional data well.","code":""},{"path":"/dev/reference/ExPanD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore Your Data (ExPanD) — ExPanD","text":"","code":"ExPanD(   df = NULL,   cs_id = NULL,   ts_id = NULL,   df_def = NULL,   var_def = NULL,   config_list = NULL,   title = \"ExPanD - Explore your data!\",   abstract = NULL,   df_name = deparse(substitute(df)),   long_def = TRUE,   factor_cutoff = 10L,   components = c(sample_selection = TRUE, subset_factor = TRUE, grouping = TRUE,     bar_chart = TRUE, missing_values = TRUE, udvars = TRUE, descriptive_table = TRUE,     histogram = TRUE, ext_obs = TRUE, by_group_bar_graph = TRUE, by_group_violin_graph =     TRUE, trend_graph = TRUE, quantile_trend_graph = TRUE, by_group_trend_graph = TRUE,     corrplot = TRUE, scatter_plot = TRUE, regression = TRUE),   html_blocks = NULL,   export_nb_option = FALSE,   save_settings_option = TRUE,   store_encrypted = FALSE,   key_phrase = \"What a wonderful key\",   debug = FALSE,   ... )"},{"path":"/dev/reference/ExPanD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore Your Data (ExPanD) — ExPanD","text":"df data frame list data frames containing data want explore. NULL, ExPanD start file upload dialog. cs_id character vector containing names variables identify cross-section data. cs_id ts_id provided, data treated cross-sectional, appropriate displays included. df_def overrides provided. ts_id character scalar identifying name variable identifies time series data. according variable needs coercible ordered vector. provide time series indicator already ordered vector, ExPanD verify levels data frame throw error otherwise. cs_id ts_id provided either directly df_def, data treated cross-sectional,observations identified row names appropriate displays included. df_def overrides provided. df_def optional dataframe (list dataframes) containing variable names, definitions types. NULL (default) ExPanD uses cs_id ts_id identify data structure determines variable types (factor, numeric, logical) based classes data. See details section information. var_def specify dataframe containing variable names variable definitions, ExPanD use provided sample(s) create analysis sample. See details section structure var_def dataframe. NULL (default) sample(s) provided df used analysis sample(s) directly. config_list list containing startup configuration ExPanD display. Take look data(ExPanD_config_russell_3000) format. easiest way generate config list customize display within app save configuration locally. title title display shiny web app. abstract introductory text display shiny web app. Needs formatted clean HTML. df_name character string vector character strings characterizing dataframe(s) provided df (used selection menu app) long_def set TRUE (default) providing var_def ExPanD add definitions used variables underlying dataframe definitions provided analysis sample make informative user. set FALSE variable definitions provided var_def sample provided user. factor_cutoff ExPanD treats factors different numerical variables. Factors available sub-sampling data certain plots. variable classified treated factor. addition, ExPanD classifies logical values numerical values less equal factor_cutoff unique values factor. components named logical vector indicating components want ExPanD generate order. See function head ExpanD list available components. default, components reported. can also exclude selected components standard order setting FALSE. addition, can include arbitrary number html_block components. block render clean HTML code contained html_blocks parameter . allows customize ExPanD report. html_blocks character vector containing clean HTML code html_block included components. export_nb_option want give user option download data R notebook containing code analyses ExPanD displays? Defaults FALSE. save_settings_option want give user option save /load settings ExPanD app local environment? Defaults TRUE. store_encrypted want user-side saved config files encrypted? security measure avoid users can inject arbitrary code config list. Probably good idea hosting sensitive data publicly available server. key_phrase key phrase use encryption. Change default want encrypt config files. debug want ExPanD echo debug timing information console/log file store diagnostics global environment? Probably . ... Additional parameters passed runApp.","code":""},{"path":"/dev/reference/ExPanD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explore Your Data (ExPanD) — ExPanD","text":"start ExPanD without options, start upload dialog user (e.g., ) can upload data file analysis. Supported formats provided rio package. start ExPanD dataframe parameter, assume data cross-sectional use row names cross-sectional identifier. panel data long format, set ts_id cs_id parameters identify variables determine time series cross-sectional dimensions. provide variable definitions df_def /var_def, ExPanD displays tooltips descriptive table ExPanD app. case, need identify panel dimensions variable definitions (see ). provide one data frame df, make sure variables variable types defined. , ExPanD throw error. provide one df_def multiple data frames, df_def recycled. provide var_def, ExPanD starts \"advanced mode\". advanced mode uses () base sample(s) (one(s) provide via df) variable definitions var_def generate analysis sample based active base sample. advanced mode, app user can delete variables analysis sample within app. df_def var_def dataframe can contain following variables \"var_name\" Required: names variables provided base sample calculated analysis sample \"var_def\" Required: var_def data frame, code passed data frame (grouped cross-sectional units) calls mutate right hand side calculate respective variable. data_def data frame, string describing nature variable. \"type\" Required: One strings \"cs_id\", \"ts_id\", \"factor\", \"logical\" \"numeric\", indicating type variable. Please note least one variable assigned cross-sectional identifier (\"cs_id\") exactly one variable coercible ordered factor assigned time-series identifier (\"ts_id\"). \"can_be_na\" Optional: included, variables value set FALSE required non missing data set. reduces number observations. missing, defaults TRUE variables cs_id ts_id.","code":""},{"path":"/dev/reference/ExPanD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore Your Data (ExPanD) — ExPanD","text":"","code":"if (FALSE) {   ExPanD()    # Use this if you want to read very large files via the file dialog   options(shiny.maxRequestSize = 1024^3)   ExPanD()    # Explore cross-sectional data   ExPanD(mtcars)    # Include the option to download notebook code and data   ExPanD(mtcars, export_nb_option = TRUE)    # Use ExPanD on long-form panel data   data(russell_3000)   ExPanD(russell_3000, c(\"coid\", \"coname\"), \"period\")   ExPanD(russell_3000, df_def = russell_3000_data_def)   ExPanD(russell_3000, df_def = russell_3000_data_def,     components = c(ext_obs = T, descriptive_table = T, regression = T))   ExPanD(russell_3000, df_def = russell_3000_data_def,     components = c(missing_values = F, by_group_violin_graph = F))   ExPanD(russell_3000, df_def = russell_3000_data_def,     components = c(html_block = T, descriptive_table = T,     html_block = T, regression = T),     html_blocks = c(     paste('<div class=\"col-sm-2\"><h3>HTML Block 1<\/h3><\/div>',     '<div class=\"col-sm-10\">',     \"<p><\/p>This is a condensed variant of ExPanD with two additional HTML Blocks.\",     \"<\/div>\"),     paste('<div class=\"col-sm-2\"><h3>HTML Block 2<\/h3><\/div>',     '<div class=\"col-sm-10\">',     \"It contains only the descriptive table and the regression component.\",     \"<\/div>\")))   data(ExPanD_config_russell_3000)   ExPanD(df = russell_3000, df_def = russell_3000_data_def,     config_list = ExPanD_config_russell_3000)   exploratory_sample <- sample(nrow(russell_3000), round(0.5*nrow(russell_3000)))   test_sample <- setdiff(1:nrow(russell_3000), exploratory_sample)   ExPanD(df = list(russell_3000[exploratory_sample, ], russell_3000[test_sample, ]),     df_def = russell_3000_data_def,     df_name = c(\"Exploratory sample\", \"Test sample\"))   ExPanD(worldbank, df_def = worldbank_data_def, var_def = worldbank_var_def,     config_list = ExPanD_config_worldbank)      }"},{"path":"/dev/reference/ExPanD_config_russell_3000.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Configuration to use with ExPanD and the Russell 3000 Data Set — ExPanD_config_russell_3000","title":"Default Configuration to use with ExPanD and the Russell 3000 Data Set — ExPanD_config_russell_3000","text":"List use list_config parameter starting ExPanD.","code":""},{"path":"/dev/reference/ExPanD_config_russell_3000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Configuration to use with ExPanD and the Russell 3000 Data Set — ExPanD_config_russell_3000","text":"","code":"data(ExPanD_config_russell_3000)"},{"path":"/dev/reference/ExPanD_config_russell_3000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Configuration to use with ExPanD and the Russell 3000 Data Set — ExPanD_config_russell_3000","text":"object class \"list\".","code":""},{"path":"/dev/reference/ExPanD_config_russell_3000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Configuration to use with ExPanD and the Russell 3000 Data Set — ExPanD_config_russell_3000","text":"","code":"data(russell_3000) data(russell_3000_data_def) data(ExPanD_config_russell_3000) if (FALSE) {   ExPanD(russell_3000, df_def = russell_3000_data_def, config_list = ExPanD_config_russell_3000) }"},{"path":"/dev/reference/ExPanD_config_worldbank.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Configuration to Use with ExPanD and the worldbank Data Set — ExPanD_config_worldbank","title":"Default Configuration to Use with ExPanD and the worldbank Data Set — ExPanD_config_worldbank","text":"List use list_config parameter starting ExPanD.","code":""},{"path":"/dev/reference/ExPanD_config_worldbank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Configuration to Use with ExPanD and the worldbank Data Set — ExPanD_config_worldbank","text":"","code":"data(ExPanD_config_worldbank)"},{"path":"/dev/reference/ExPanD_config_worldbank.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Configuration to Use with ExPanD and the worldbank Data Set — ExPanD_config_worldbank","text":"object class \"list\".","code":""},{"path":"/dev/reference/ExPanD_config_worldbank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Configuration to Use with ExPanD and the worldbank Data Set — ExPanD_config_worldbank","text":"","code":"data(worldbank) data(worldbank_data_def) data(worldbank_var_def) data(ExPanD_config_worldbank) if (FALSE) {   ExPanD(worldbank, df_def = worldbank_data_def,     var_def = worldbank_var_def, config_list = ExPanD_config_worldbank) }"},{"path":"/dev/reference/ExPanDaR.html","id":null,"dir":"Reference","previous_headings":"","what":"ExPanDaR: Explore Panel Data with R — ExPanDaR","title":"ExPanDaR: Explore Panel Data with R — ExPanDaR","text":"ExPanDaR provides code base ExPanD web app. ExPanD shiny based app supporting interactive exploratory data analysis.","code":""},{"path":"/dev/reference/ExPanDaR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ExPanDaR: Explore Panel Data with R — ExPanDaR","text":"ExPanDaR two main goals: Enable users assess robustness     empirical evidence without providing     access underlying data. Provide toolbox researchers explore     panel data fly. learn ExPanDaR, start vignettes: browseVignettes(package = \"ExPanDaR\")","code":""},{"path":"/dev/reference/prepare_by_group_bar_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","title":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","text":"Reads data frame containing grouping factor numerical variable plots bar graph given statistic variable grouping factor.","code":""},{"path":"/dev/reference/prepare_by_group_bar_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","text":"","code":"prepare_by_group_bar_graph(   df,   by_var,   var,   stat_fun = mean,   order_by_stat = FALSE,   color = \"red\" )"},{"path":"/dev/reference/prepare_by_group_bar_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","text":"df Data frame containing grouping factor numerical variable plotted by_var string containing column name grouping factor var string containing column name numerical variable stat_fun function called numerical variable. called na.rm = TRUE ignore missing values order_by_stat logical value indicating whether want bars ordered value statistic (defaults FALSE) color bar color","code":""},{"path":"/dev/reference/prepare_by_group_bar_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","text":"list containing two items: \"df\" data frame containing statistics group \"plot\" plot returned ggplot","code":""},{"path":"/dev/reference/prepare_by_group_bar_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a by Group Bar Graph — prepare_by_group_bar_graph","text":"","code":"data(russell_3000) graph <- prepare_by_group_bar_graph(russell_3000, \"sector\", \"ni_sales\", median) graph$plot"},{"path":"/dev/reference/prepare_by_group_trend_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","title":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","text":"Reads data frame line plots selected variables (need numeric)  group ordered factor (normally time-series indicator).","code":""},{"path":"/dev/reference/prepare_by_group_trend_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","text":"","code":"prepare_by_group_trend_graph(   df,   ts_id,   group_var,   var,   points = TRUE,   error_bars = FALSE )"},{"path":"/dev/reference/prepare_by_group_trend_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","text":"df Data frame containing ordered factor set numerical variables plotted. ts_id string containing column name ordered factor (normally time-series indicator). group_var variable coercible factor group data . var name variable want plot. points want points indicate observations? Defaults TRUE. error_bars want error bars plotted? Defaults FALSE.","code":""},{"path":"/dev/reference/prepare_by_group_trend_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","text":"list containing two items: \"df\" data frame containing plotted means standard errors group \"plot plot returned ggplot","code":""},{"path":"/dev/reference/prepare_by_group_trend_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a By Group Trend Graph — prepare_by_group_trend_graph","text":"","code":"df <- worldbank df$gdp_capita <- worldbank$NY.GDP.PCAP.KD graph <- prepare_by_group_trend_graph(df, \"year\", \"region\", \"gdp_capita\") graph$plot"},{"path":"/dev/reference/prepare_by_group_violin_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","title":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","text":"Reads data frame containing grouping factor numerical variable plots series violin graphs grouping factor.","code":""},{"path":"/dev/reference/prepare_by_group_violin_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","text":"","code":"prepare_by_group_violin_graph(   df,   by_var,   var,   order_by_mean = FALSE,   group_on_y = TRUE,   ... )"},{"path":"/dev/reference/prepare_by_group_violin_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","text":"df Data frame containing grouping factor numerical variable plotted by_var string containing column name grouping factor var string containing column name numerical variable order_by_mean logical value indicating whether want violins ordered group means (defaults FALSE) group_on_y logical value indicating whether want violins oriented horizontally (defaults TRUE) ... additional parameters passed geom_violin","code":""},{"path":"/dev/reference/prepare_by_group_violin_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","text":"plot returned ggplot2","code":""},{"path":"/dev/reference/prepare_by_group_violin_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a by Group Violin Graph — prepare_by_group_violin_graph","text":"","code":"data(russell_3000) df <- treat_outliers(russell_3000) prepare_by_group_violin_graph(df, \"sector\", \"nioa\") #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the ExPanDaR package. #>   Please report the issue at <https://github.com/trr266/ExPanDaR/issues>."},{"path":"/dev/reference/prepare_correlation_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Correlation Graph — prepare_correlation_graph","title":"Prepares a Correlation Graph — prepare_correlation_graph","text":"Reads data frame presents Pearson correlations Spearman correlations diagonal using fancy graph prepared package corrplot.","code":""},{"path":"/dev/reference/prepare_correlation_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Correlation Graph — prepare_correlation_graph","text":"","code":"prepare_correlation_graph(df)"},{"path":"/dev/reference/prepare_correlation_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Correlation Graph — prepare_correlation_graph","text":"df Data frame containing least two variables either numeric logical least five observations.","code":""},{"path":"/dev/reference/prepare_correlation_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Correlation Graph — prepare_correlation_graph","text":"function directly renders graph produced corrplot. addition, returns list containing three items: \"df_corr\" data frame containing correlations \"df_prob\" data frame containing p-values correlations \"df_n\" data frame containing number observations used correlations","code":""},{"path":"/dev/reference/prepare_correlation_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Correlation Graph — prepare_correlation_graph","text":"","code":"prepare_correlation_graph(mtcars)  #> $df_corr #>             mpg        cyl       disp         hp        drat         wt #> mpg   1.0000000 -0.8521620 -0.8475514 -0.7761684  0.68117191 -0.8676594 #> cyl  -0.9108013  1.0000000  0.9020329  0.8324475 -0.69993811  0.7824958 #> disp -0.9088824  0.9276516  1.0000000  0.7909486 -0.71021393  0.8879799 #> hp   -0.8946646  0.9017909  0.8510426  1.0000000 -0.44875912  0.6587479 #> drat  0.6514555 -0.6788812 -0.6835921 -0.5201250  1.00000000 -0.7124406 #> wt   -0.8864220  0.8577282  0.8977064  0.7746767 -0.75039041  1.0000000 #> qsec  0.4669358 -0.5723509 -0.4597818 -0.6666060  0.09186863 -0.2254012 #> vs    0.7065968 -0.8137890 -0.7236643 -0.7515934  0.44745745 -0.5870162 #> am    0.5620057 -0.5220712 -0.6240677 -0.3623276  0.68657079 -0.7377126 #> gear  0.5427816 -0.5643105 -0.5944703 -0.3314016  0.74481617 -0.6761284 #> carb -0.6574976  0.5800680  0.5397781  0.7333794 -0.12522294  0.4998120 #>             qsec         vs          am       gear        carb #> mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507 #> cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829 #> disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686 #> hp   -0.70822339 -0.7230967 -0.24320426 -0.1257043  0.74981247 #> drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980 #> wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594 #> qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923 #> vs    0.79157148  1.0000000  0.16834512  0.2060233 -0.56960714 #> am   -0.20333211  0.1683451  1.00000000  0.7940588  0.05753435 #> gear -0.14819967  0.2826617  0.80768800  1.0000000  0.27407284 #> carb -0.65871814 -0.6336948 -0.06436525  0.1148870  1.00000000 #>  #> $df_prob #>               mpg          cyl         disp           hp         drat #> mpg  0.000000e+00 6.112687e-10 9.380327e-10 1.787835e-07 1.776240e-05 #> cyl  4.690287e-13 0.000000e+00 1.802838e-12 3.477861e-09 8.244636e-06 #> disp 6.370336e-13 2.275443e-14 0.000000e+00 7.142679e-08 5.282022e-06 #> hp   5.085969e-12 1.867686e-12 6.791338e-10 0.000000e+00 9.988772e-03 #> drat 5.381347e-05 1.943342e-05 1.613884e-05 2.277988e-03 0.000000e+00 #> wt   1.487595e-11 3.574157e-10 3.346362e-12 1.953795e-07 7.593194e-07 #> qsec 7.055765e-03 6.195832e-04 8.108019e-03 3.105344e-05 6.170251e-01 #> vs   6.191450e-06 1.484058e-08 2.863870e-06 7.125286e-07 1.023343e-02 #> am   8.156989e-04 2.178046e-03 1.352011e-04 4.155768e-02 1.432515e-05 #> gear 1.328681e-03 7.678209e-04 3.334775e-04 6.390322e-02 1.014930e-06 #> carb 4.337570e-05 5.016643e-04 1.430209e-03 1.799847e-06 4.946824e-01 #>                wt         qsec           vs           am         gear #> mpg  1.293959e-10 1.708199e-02 3.415937e-05 2.850207e-04 5.400948e-03 #> cyl  1.217567e-07 3.660533e-04 1.843018e-08 2.151207e-03 4.173297e-03 #> disp 1.222320e-11 1.314404e-02 5.235012e-06 3.662114e-04 9.635921e-04 #> hp   4.145827e-05 5.766253e-06 2.940896e-06 1.798309e-01 4.930119e-01 #> drat 4.784260e-06 6.195826e-01 1.167553e-02 4.726790e-06 8.360110e-06 #> wt   0.000000e+00 3.388683e-01 9.798492e-04 1.125440e-05 4.586601e-04 #> qsec 2.148388e-01 0.000000e+00 1.029669e-06 2.056621e-01 2.425344e-01 #> vs   4.129434e-04 6.860828e-08 0.000000e+00 3.570439e-01 2.579439e-01 #> am   1.453656e-06 2.643506e-01 3.570439e-01 0.000000e+00 5.834043e-08 #> gear 2.162837e-05 4.182425e-01 1.169934e-01 2.304063e-08 0.000000e+00 #> carb 3.583063e-03 4.150300e-05 9.878823e-05 7.263524e-01 5.312358e-01 #>              carb #> mpg  1.084446e-03 #> cyl  1.942340e-03 #> disp 2.526789e-02 #> hp   7.827810e-07 #> drat 6.211834e-01 #> wt   1.463861e-02 #> qsec 4.536949e-05 #> vs   6.670496e-04 #> am   7.544526e-01 #> gear 1.290291e-01 #> carb 0.000000e+00 #>  #> $df_n #>      mpg cyl disp hp drat wt qsec vs am gear carb #> mpg   32  32   32 32   32 32   32 32 32   32   32 #> cyl   32  32   32 32   32 32   32 32 32   32   32 #> disp  32  32   32 32   32 32   32 32 32   32   32 #> hp    32  32   32 32   32 32   32 32 32   32   32 #> drat  32  32   32 32   32 32   32 32 32   32   32 #> wt    32  32   32 32   32 32   32 32 32   32   32 #> qsec  32  32   32 32   32 32   32 32 32   32   32 #> vs    32  32   32 32   32 32   32 32 32   32   32 #> am    32  32   32 32   32 32   32 32 32   32   32 #> gear  32  32   32 32   32 32   32 32 32   32   32 #> carb  32  32   32 32   32 32   32 32 32   32   32 #>"},{"path":"/dev/reference/prepare_correlation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Correlation Table — prepare_correlation_table","title":"Prepares a Correlation Table — prepare_correlation_table","text":"Reads data frame presents Pearson correlations diagonal Spearman correlations .","code":""},{"path":"/dev/reference/prepare_correlation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Correlation Table — prepare_correlation_table","text":"","code":"prepare_correlation_table(df, digits = 2, bold = 0.05, format = \"html\", ...)"},{"path":"/dev/reference/prepare_correlation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Correlation Table — prepare_correlation_table","text":"df Data frame containing least two variables either numeric logical least five observations. digits number digits want report. bold Indicate p-Value identifying significant correlations bold print. Defaults 0.05. set 0, bold print used. format format want kable produce (\"html\" \"latex\") ... Additional parameters passed kable","code":""},{"path":"/dev/reference/prepare_correlation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Correlation Table — prepare_correlation_table","text":"list containing four items: \"df_corr\" data frame containing correlations \"df_prob\" data frame containing p-values correlations \"df_n\" data frame containing number observations used correlations \"kable_ret\" return value provided kable containing formatted table","code":""},{"path":"/dev/reference/prepare_correlation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Correlation Table — prepare_correlation_table","text":"","code":"t <- prepare_correlation_table(mtcars) t$df_corr #>             mpg        cyl       disp         hp        drat         wt #> mpg   1.0000000 -0.8521620 -0.8475514 -0.7761684  0.68117191 -0.8676594 #> cyl  -0.9108013  1.0000000  0.9020329  0.8324475 -0.69993811  0.7824958 #> disp -0.9088824  0.9276516  1.0000000  0.7909486 -0.71021393  0.8879799 #> hp   -0.8946646  0.9017909  0.8510426  1.0000000 -0.44875912  0.6587479 #> drat  0.6514555 -0.6788812 -0.6835921 -0.5201250  1.00000000 -0.7124406 #> wt   -0.8864220  0.8577282  0.8977064  0.7746767 -0.75039041  1.0000000 #> qsec  0.4669358 -0.5723509 -0.4597818 -0.6666060  0.09186863 -0.2254012 #> vs    0.7065968 -0.8137890 -0.7236643 -0.7515934  0.44745745 -0.5870162 #> am    0.5620057 -0.5220712 -0.6240677 -0.3623276  0.68657079 -0.7377126 #> gear  0.5427816 -0.5643105 -0.5944703 -0.3314016  0.74481617 -0.6761284 #> carb -0.6574976  0.5800680  0.5397781  0.7333794 -0.12522294  0.4998120 #>             qsec         vs          am       gear        carb #> mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507 #> cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829 #> disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686 #> hp   -0.70822339 -0.7230967 -0.24320426 -0.1257043  0.74981247 #> drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980 #> wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594 #> qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923 #> vs    0.79157148  1.0000000  0.16834512  0.2060233 -0.56960714 #> am   -0.20333211  0.1683451  1.00000000  0.7940588  0.05753435 #> gear -0.14819967  0.2826617  0.80768800  1.0000000  0.27407284 #> carb -0.65871814 -0.6336948 -0.06436525  0.1148870  1.00000000"},{"path":"/dev/reference/prepare_descriptive_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"Reads data frame reports descriptive statistics (n, mean, standard deviation, minimum, first quartile, median, third quartile, maximum) members data frame either numeric logical.","code":""},{"path":"/dev/reference/prepare_descriptive_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"","code":"prepare_descriptive_table(   df,   digits = c(0, 3, 3, 3, 3, 3, 3, 3),   format = \"html\" )"},{"path":"/dev/reference/prepare_descriptive_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"df Data frame containing least one variable either numeric logical least two observations. digits Number decimal digits want displayed column. provide NA, column omitted output. format character scalar handed kable (e.g., \"html\" \"latex\").","code":""},{"path":"/dev/reference/prepare_descriptive_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"list containing two items. \"df\" data frame containing descriptive table \"kable_ret\" return value provided kable containing formatted table","code":""},{"path":"/dev/reference/prepare_descriptive_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"digits parameter prepare_descriptive_table() uses default method   kable format numbers, calling round. implies trailing zeroes   just omitted.","code":""},{"path":"/dev/reference/prepare_descriptive_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Table of Descriptive Statistics — prepare_descriptive_table","text":"","code":"t <- prepare_descriptive_table(mtcars) t$df #>       N       Mean   Std. dev.   Min.      25 %  Median   75 %    Max. #> mpg  32  20.090625   6.0269481 10.400  15.42500  19.200  22.80  33.900 #> cyl  32   6.187500   1.7859216  4.000   4.00000   6.000   8.00   8.000 #> disp 32 230.721875 123.9386938 71.100 120.82500 196.300 326.00 472.000 #> hp   32 146.687500  68.5628685 52.000  96.50000 123.000 180.00 335.000 #> drat 32   3.596563   0.5346787  2.760   3.08000   3.695   3.92   4.930 #> wt   32   3.217250   0.9784574  1.513   2.58125   3.325   3.61   5.424 #> qsec 32  17.848750   1.7869432 14.500  16.89250  17.710  18.90  22.900 #> vs   32   0.437500   0.5040161  0.000   0.00000   0.000   1.00   1.000 #> am   32   0.406250   0.4989909  0.000   0.00000   0.000   1.00   1.000 #> gear 32   3.687500   0.7378041  3.000   3.00000   4.000   4.00   5.000 #> carb 32   2.812500   1.6152000  1.000   2.00000   2.000   4.00   8.000"},{"path":"/dev/reference/prepare_ext_obs_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"Reads data frame, sorts given variable displays top bottom n observations.","code":""},{"path":"/dev/reference/prepare_ext_obs_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"","code":"prepare_ext_obs_table(   df,   n = 5,   cs_id = NULL,   ts_id = NULL,   var = utils::tail(colnames(df[sapply(df, is.numeric) & (!colnames(df) %in% c(cs_id,     ts_id))]), n = 1),   ... )"},{"path":"/dev/reference/prepare_ext_obs_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"df Data frame n number top/bottom observations want report. cs_id variable(s) identifying cross-section data. ts_id variable identifying time-series data. var Variable display. Defaults last numerical variable data frame. ... Additional parameters passed kable.","code":""},{"path":"/dev/reference/prepare_ext_obs_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"list containing two items: \"df\" data frame containing top/bottom n observations \"kable_ret\" return value provided kable containing formatted table","code":""},{"path":"/dev/reference/prepare_ext_obs_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"cs_id ts_id omitted, variables tabulated.   Otherwise, var tabulated along identifiers.   Infinite values var omitted.   default parameters calling kable,   format = \"html\", digits = 3, format.args = list(big.mark = ','), row.names = FALSE.","code":""},{"path":"/dev/reference/prepare_ext_obs_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Table Displaying Extreme Observations — prepare_ext_obs_table","text":"","code":"t <- prepare_ext_obs_table(russell_3000, n = 10,                            cs_id = c(\"coid\", \"coname\"),                            ts_id = \"period\", var = \"sales\") t$df #>      coid                        coname period     sales #> 8517  WMT         Wal-Mart Stores, Inc. FY2015 485651.00 #> 8518  WMT         Wal-Mart Stores, Inc. FY2016 482130.00 #> 8516  WMT         Wal-Mart Stores, Inc. FY2014 476294.00 #> 8664  XOM       Exxon Mobil Corporation FY2013 420836.00 #> 8665  XOM       Exxon Mobil Corporation FY2014 394105.00 #> 8666  XOM       Exxon Mobil Corporation FY2015 259488.00 #> 33   AAPL                    Apple Inc. FY2015 233715.00 #> 2092  CVX           Chevron Corporation FY2013 220264.00 #> 8667  XOM       Exxon Mobil Corporation FY2016 218608.00 #> 34   AAPL                    Apple Inc. FY2016 215639.00 #> 3938 IDRA   Idera Pharmaceuticals, Inc. FY2014      0.07 #> 7386 STML   Stemline Therapeutics, Inc. FY2013      0.07 #> 92   ACAD   ACADIA Pharmaceuticals Inc. FY2015      0.06 #> 484  AMPE   Ampio Pharmaceuticals, Inc. FY2013      0.05 #> 838  AXDX  Accelerate Diagnostics, Inc. FY2013      0.05 #> 3937 IDRA   Idera Pharmaceuticals, Inc. FY2013      0.05 #> 5471   NK               NantKwest, Inc. FY2016      0.04 #> 6343 PRTK Paratek Pharmaceuticals, Inc. FY2016      0.03 #> 3343 GLYC           GlycoMimetics, Inc. FY2016      0.02 #> 1157 BPTH       Bio-Path Holdings, Inc. FY2016      0.01"},{"path":"/dev/reference/prepare_missing_values_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"Displays heatmap missing value frequency across panel","code":""},{"path":"/dev/reference/prepare_missing_values_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"","code":"prepare_missing_values_graph(df, ts_id, no_factors = FALSE, binary = FALSE)"},{"path":"/dev/reference/prepare_missing_values_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"df Data frame containing data. ts_id string containing name variable indicating time dimension. Needs coercible ordered factor. no_factors logical value indicating whether want limit plot logical numerical variables. Defaults FALSE. binary set TRUE, plot uses binary scale high-lightening whether values missing . Defaults FALSE.","code":""},{"path":"/dev/reference/prepare_missing_values_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"ggplot2 plot.","code":""},{"path":"/dev/reference/prepare_missing_values_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"inspired   blog post Rense Nieuwenhuis.   Thanks!","code":""},{"path":"/dev/reference/prepare_missing_values_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Graph Displaying Missing Values in Panel Data — prepare_missing_values_graph","text":"","code":"prepare_missing_values_graph(russell_3000, ts_id=\"period\") #> Warning: `gather_()` was deprecated in tidyr 1.2.0. #> ℹ Please use `gather()` instead. #> ℹ The deprecated feature was likely used in the ExPanDaR package. #>   Please report the issue at <https://github.com/trr266/ExPanDaR/issues>.  prepare_missing_values_graph(russell_3000, ts_id=\"period\", binary = TRUE)"},{"path":"/dev/reference/prepare_quantile_trend_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","title":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","text":"Reads data frame plots quantiles specified variable ordered factor (normally time-series indicator)","code":""},{"path":"/dev/reference/prepare_quantile_trend_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","text":"","code":"prepare_quantile_trend_graph(   df,   ts_id,   quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),   var = utils::tail(colnames(df[sapply(df, is.numeric) & colnames(df) != ts_id]), n = 1),   points = TRUE )"},{"path":"/dev/reference/prepare_quantile_trend_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","text":"df Data frame containing ordered factor numerical variable plotted ts_id string containing column name ordered factor (normally time-series indicator) quantiles numerical vector containing quantiles plotted var string containing column name variable plotted. Defaults last numerical variable data frame ts_id. points want points indicate statistics? Defaults TRUE.","code":""},{"path":"/dev/reference/prepare_quantile_trend_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","text":"list containing two items: \"df\" data frame containing plotted quantiles \"plot\" plot returned ggplot","code":""},{"path":"/dev/reference/prepare_quantile_trend_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Quantile Trend Graph — prepare_quantile_trend_graph","text":"","code":"prepare_quantile_trend_graph(worldbank, \"year\", var = \"SP.DYN.LE00.IN\")$plot +   ggplot2::ylab(\"Life expectancy at birth world-wide\")  df <- data.frame(year = floor(stats::time(datasets::EuStockMarkets)),                  DAX = datasets::EuStockMarkets[,\"DAX\"]) graph <- prepare_quantile_trend_graph(df, \"year\", c(0.05, 0.25, 0.5, 0.75, 0.95)) graph$plot"},{"path":"/dev/reference/prepare_regression_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Regression Table — prepare_regression_table","title":"Prepares a Regression Table — prepare_regression_table","text":"Builds regression table based set user-specified models single model partitioning variable.","code":""},{"path":"/dev/reference/prepare_regression_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Regression Table — prepare_regression_table","text":"","code":"prepare_regression_table(   df,   dvs,   idvs,   feffects = rep(\"\", length(dvs)),   clusters = rep(\"\", length(dvs)),   models = rep(\"auto\", length(dvs)),   byvar = \"\",   format = \"html\" )"},{"path":"/dev/reference/prepare_regression_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Regression Table — prepare_regression_table","text":"df Data frame containing data estimate models . dvs character vector containing variable names dependent variable(s). idvs character vector list character vectors containing variable names independent variables. feffects character vector list character vectors containing variable names fixed effects. clusters character vector list character vectors containing variable names cluster variables. models character vector indicating model types estimated ('ols', 'logit', 'auto') byvar factorial variable estimate model (possible one model estimated). format character scalar passed stargazer type determine presentation format (\"html\", \"text\", \"latex\").","code":""},{"path":"/dev/reference/prepare_regression_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Regression Table — prepare_regression_table","text":"list containing two items \"models\" list containing model results values appropriate \"table\" output stargazer containing table","code":""},{"path":"/dev/reference/prepare_regression_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares a Regression Table — prepare_regression_table","text":"wrapper function calling stargazer package. Depending whether dependent variable   numeric, logical factor two levels, models estimated   using felm (numeric dependent variables)   glm (family = binomial(link=\"logit\")) (two-level factors logical variables).   can override behavior specifying model models parameter.   Multinomial logit models supported.   glm, clustered standard errors estimated using   cluster.vcov.   felm, run cmethod='reghdfe'   make clustered standard errors consistent Stata's 'reghdfe'.   run byvar, levels observations coefficients estimated.","code":""},{"path":"/dev/reference/prepare_regression_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Regression Table — prepare_regression_table","text":"","code":"df <- data.frame(year = as.factor(floor(stats::time(datasets::EuStockMarkets))),                  datasets::EuStockMarkets) dvs = c(\"DAX\", \"SMI\", \"CAC\", \"FTSE\") idvs = list(c(\"SMI\", \"CAC\", \"FTSE\"),             c(\"DAX\", \"CAC\", \"FTSE\"),             c(\"SMI\", \"DAX\", \"FTSE\"),             c(\"SMI\", \"CAC\", \"DAX\")) feffects = list(\"year\", \"year\", \"year\", \"year\") clusters = list(\"year\", \"year\", \"year\", \"year\") t <- prepare_regression_table(df, dvs, idvs, feffects, clusters, format = \"text\") t$table #>  [1] \"\"                                                          #>  [2] \"=========================================================\" #>  [3] \"                              Dependent variable:        \" #>  [4] \"                      -----------------------------------\" #>  [5] \"                        DAX      SMI      CAC      FTSE  \" #>  [6] \"                        (1)      (2)      (3)      (4)   \" #>  [7] \"---------------------------------------------------------\" #>  [8] \"SMI                   0.447***           -0.095  0.566***\" #>  [9] \"                      (0.046)           (0.088)  (0.107) \" #> [10] \"                                                         \" #> [11] \"DAX                            0.864*** 0.664***  -0.188 \" #> [12] \"                               (0.169)  (0.141)  (0.180) \" #> [13] \"                                                         \" #> [14] \"CAC                   0.735***  -0.204            0.188  \" #> [15] \"                      (0.111)  (0.218)           (0.102) \" #> [16] \"                                                         \" #> [17] \"FTSE                   -0.124  0.722***  0.112           \" #> [18] \"                      (0.125)  (0.060)  (0.075)          \" #> [19] \"                                                         \" #> [20] \"---------------------------------------------------------\" #> [21] \"Estimator               ols      ols      ols      ols   \" #> [22] \"Fixed effects           year     year     year     year  \" #> [23] \"Std. errors clustered   year     year     year     year  \" #> [24] \"Observations           1,860    1,860    1,860    1,860  \" #> [25] \"R2                     0.994    0.995    0.981    0.989  \" #> [26] \"Adjusted R2            0.994    0.995    0.981    0.989  \" #> [27] \"=========================================================\" #> [28] \"Note:                         *p<0.1; **p<0.05; ***p<0.01\" t <- prepare_regression_table(df, \"DAX\", c(\"SMI\", \"CAC\", \"FTSE\"), byvar=\"year\", format = \"text\") print(t$table) #>  [1] \"\"                                                                                                                                   #>  [2] \"==================================================================================================================================\" #>  [3] \"                                                                  Dependent variable:                                             \" #>  [4] \"                      ------------------------------------------------------------------------------------------------------------\" #>  [5] \"                                                                          DAX                                                     \" #>  [6] \"                      Full Sample    1991       1992       1993         1994        1995       1996         1997          1998    \" #>  [7] \"                          (1)        (2)        (3)         (4)         (5)         (6)         (7)          (8)          (9)     \" #>  [8] \"----------------------------------------------------------------------------------------------------------------------------------\" #>  [9] \"SMI                    0.493***    0.634***  -0.283***   0.445***    -0.265***    0.333***   0.189***     0.258***      0.244***  \" #> [10] \"                        (0.015)    (0.068)    (0.056)     (0.021)     (0.039)     (0.043)     (0.020)      (0.026)      (0.043)   \" #> [11] \"                                                                                                                                  \" #> [12] \"CAC                    0.496***     -0.052    0.952***   0.516***     0.721***    0.304***   0.577***     1.019***      1.182***  \" #> [13] \"                        (0.015)    (0.045)    (0.026)     (0.033)     (0.052)     (0.060)     (0.039)      (0.075)      (0.054)   \" #> [14] \"                                                                                                                                  \" #> [15] \"FTSE                    -0.017      0.066     -0.069**   0.134***     -0.085**     0.017     0.389***     0.195***     -0.378***  \" #> [16] \"                        (0.021)    (0.046)    (0.035)     (0.040)     (0.039)     (0.049)     (0.027)      (0.045)      (0.045)   \" #> [17] \"                                                                                                                                  \" #> [18] \"Constant              -175.946*** 458.772*** 575.676*** -688.784*** 1,623.337*** 567.057*** -803.680*** -1,353.434*** 1,146.634***\" #> [19] \"                       (44.666)    (72.607)   (72.806)   (56.941)     (65.786)   (105.476)   (68.069)     (110.585)    (174.146)  \" #> [20] \"                                                                                                                                  \" #> [21] \"----------------------------------------------------------------------------------------------------------------------------------\" #> [22] \"Estimator                 ols        ols        ols         ols         ols         ols         ols          ols          ols     \" #> [23] \"Fixed effects            None        None       None       None         None        None       None         None          None    \" #> [24] \"Std. errors clustered     No          No         No         No           No          No         No           No            No     \" #> [25] \"Observations             1,860       131        260         260         260         260         260          260          169     \" #> [26] \"R2                       0.990      0.669      0.850       0.973       0.560       0.720       0.932        0.964        0.978    \" #> [27] \"Adjusted R2              0.990      0.661      0.848       0.973       0.555       0.717       0.931        0.964        0.978    \" #> [28] \"==================================================================================================================================\" #> [29] \"Note:                                                                                                  *p<0.1; **p<0.05; ***p<0.01\""},{"path":"/dev/reference/prepare_scatter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Scatter Plot — prepare_scatter_plot","title":"Prepares a Scatter Plot — prepare_scatter_plot","text":"Reads data frame prepares scatter plot.","code":""},{"path":"/dev/reference/prepare_scatter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Scatter Plot — prepare_scatter_plot","text":"","code":"prepare_scatter_plot(   df,   x,   y,   color = \"\",   size = \"\",   loess = 0,   alpha = min(1, 1/((1 + (max(0, log(nrow(df)) - log(100)))))) )"},{"path":"/dev/reference/prepare_scatter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Scatter Plot — prepare_scatter_plot","text":"df Data frame containing data x string containing column name x variable y string containing column name y variable color string containing column name variable providing color aesthetic (can numerical factor) size string containing column name variable providing size aesthetic loess numerical scalar 0 loess curve 1 loess curve equal weights 2 loess curve weights based size variable alpha alpha value used. missing, calculates default based sample size","code":""},{"path":"/dev/reference/prepare_scatter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Scatter Plot — prepare_scatter_plot","text":"plot returned ggplot","code":""},{"path":"/dev/reference/prepare_scatter_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Scatter Plot — prepare_scatter_plot","text":"","code":"df <- data.frame(year = floor(stats::time(datasets::EuStockMarkets)),                  datasets::EuStockMarkets[, c(\"DAX\", \"FTSE\")]) prepare_scatter_plot(df, x=\"DAX\", y=\"FTSE\", color=\"year\")"},{"path":"/dev/reference/prepare_trend_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares a Trend Graph — prepare_trend_graph","title":"Prepares a Trend Graph — prepare_trend_graph","text":"Reads data frame line plots variables (need numeric)  ordered factor (normally time-series indicator).","code":""},{"path":"/dev/reference/prepare_trend_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares a Trend Graph — prepare_trend_graph","text":"","code":"prepare_trend_graph(   df,   ts_id,   var = colnames(df[sapply(df, is.numeric) & colnames(df) != ts_id]) )"},{"path":"/dev/reference/prepare_trend_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares a Trend Graph — prepare_trend_graph","text":"df Data frame containing ordered factor set numerical variables plotted ts_id string containing column name ordered factor (normally time-series indicator) var character vector containing column names variables plotted. Defaults numeric variables data frame besides one indicated ts_id.","code":""},{"path":"/dev/reference/prepare_trend_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares a Trend Graph — prepare_trend_graph","text":"list containing two items: \"df\" data frame containing plotted means standard errors \"plot plot returned ggplot","code":""},{"path":"/dev/reference/prepare_trend_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares a Trend Graph — prepare_trend_graph","text":"","code":"df <- data.frame(year = floor(time(EuStockMarkets)), EuStockMarkets) graph <- prepare_trend_graph(df, \"year\") graph$plot"},{"path":"/dev/reference/russell_3000.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","title":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","text":"Data collected Google Finance Yahoo finance using package tidyquant.","code":""},{"path":"/dev/reference/russell_3000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","text":"","code":"data(russell_3000)"},{"path":"/dev/reference/russell_3000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","text":"object class \"data.frame\".","code":""},{"path":"/dev/reference/russell_3000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","text":"collected using tidyquant::tq_get function family Summer 2017.  code generate data available  github repository package.  Google Finance API providing financial statement data currently unavailable,  data replicated running code.  Use scientific studies advised without prior cleaning/checking.","code":""},{"path":"/dev/reference/russell_3000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annual Financial Accounting and Stock Return Data for a Sample of Russell 3000 Firms (2013-2016) — russell_3000","text":"","code":"data(russell_3000) prepare_missing_values_graph(russell_3000, ts_id = \"period\")"},{"path":"/dev/reference/russell_3000_data_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","title":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","text":"data frame containing variable definitions russell_3000 data set. data definitions can passed ExPanD via df_def parameter.","code":""},{"path":"/dev/reference/russell_3000_data_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","text":"","code":"data(russell_3000_data_def)"},{"path":"/dev/reference/russell_3000_data_def.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","text":"object class \"data.frame\".","code":""},{"path":"/dev/reference/russell_3000_data_def.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","text":"Data definitions provided package maintainer somewhat superficial make , short informative. User discretion advised using data outside didactic purpose.","code":""},{"path":"/dev/reference/russell_3000_data_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Definitions for russell_3000 Data Set — russell_3000_data_def","text":"","code":"data(russell_3000) data(russell_3000_data_def) data(ExPanD_config_russell_3000) if (FALSE) {   ExPanD(russell_3000, df_def = russell_3000_data_def, config_list = ExPanD_config_russell_3000) }"},{"path":"/dev/reference/treat_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Treats Outliers in Numerical Data — treat_outliers","title":"Treats Outliers in Numerical Data — treat_outliers","text":"Treats numerical outliers either winsorizing truncating.","code":""},{"path":"/dev/reference/treat_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treats Outliers in Numerical Data — treat_outliers","text":"","code":"treat_outliers(x, percentile = 0.01, truncate = FALSE, by = NULL, ...)"},{"path":"/dev/reference/treat_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treats Outliers in Numerical Data — treat_outliers","text":"x Data coercible numeric vector matrix. data frame numerical variables data frame coerced matrix. percentile numeric scalar.   percentile observations   considered outliers. treated symmetrical c(percentile, 1-percentile) used boundaries.   Defaults 0.01 needs > 0 < 0.5. truncate logical scalar. TRUE data truncated (.e., set NA bounds). Defaults FALSE. NULL either factor vector character string identifying factor variable data frame provided x. factor indicated '' used identify groups outlier treatment applied. Defaults NULL (grouping). provided, resulting vector must contain NAs needs length(byvec) == nrows(.matrix(x)). ... Additional parameters forwarded quantile (notably, type)","code":""},{"path":"/dev/reference/treat_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treats Outliers in Numerical Data — treat_outliers","text":"numeric vector matrix containing outlier-treated x.   data frame provided x, data frame numeric variables   replaced outlier-treated values.","code":""},{"path":"/dev/reference/treat_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treats Outliers in Numerical Data — treat_outliers","text":"members numerical matrix checked finiteness   set NA finite. NAs removed calculating outlier cut-offs.","code":""},{"path":"/dev/reference/treat_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treats Outliers in Numerical Data — treat_outliers","text":"","code":"treat_outliers(seq(1:100), 0.05) #>   [1]  5.95  5.95  5.95  5.95  5.95  6.00  7.00  8.00  9.00 10.00 11.00 12.00 #>  [13] 13.00 14.00 15.00 16.00 17.00 18.00 19.00 20.00 21.00 22.00 23.00 24.00 #>  [25] 25.00 26.00 27.00 28.00 29.00 30.00 31.00 32.00 33.00 34.00 35.00 36.00 #>  [37] 37.00 38.00 39.00 40.00 41.00 42.00 43.00 44.00 45.00 46.00 47.00 48.00 #>  [49] 49.00 50.00 51.00 52.00 53.00 54.00 55.00 56.00 57.00 58.00 59.00 60.00 #>  [61] 61.00 62.00 63.00 64.00 65.00 66.00 67.00 68.00 69.00 70.00 71.00 72.00 #>  [73] 73.00 74.00 75.00 76.00 77.00 78.00 79.00 80.00 81.00 82.00 83.00 84.00 #>  [85] 85.00 86.00 87.00 88.00 89.00 90.00 91.00 92.00 93.00 94.00 95.00 95.05 #>  [97] 95.05 95.05 95.05 95.05 treat_outliers(seq(1:100), truncate = TRUE, 0.05) #>   [1] NA NA NA NA NA  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #>  [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  [51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #>  [76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 NA NA NA NA NA  # When you like the percentiles calculated like STATA's summary or pctile: treat_outliers(seq(1:100), 0.05, type = 2) #>   [1]  5.5  5.5  5.5  5.5  5.5  6.0  7.0  8.0  9.0 10.0 11.0 12.0 13.0 14.0 15.0 #>  [16] 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 #>  [31] 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 #>  [46] 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 #>  [61] 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 #>  [76] 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 #>  [91] 91.0 92.0 93.0 94.0 95.0 95.5 95.5 95.5 95.5 95.5  df <- data.frame(a = seq(1:1000), b = rnorm(1000), c = sample(LETTERS[1:5], 1000, replace=TRUE)) winsorized_df <- treat_outliers(df) summary(df) #>        a                b                  c             #>  Min.   :   1.0   Min.   :-2.938978   Length:1000        #>  1st Qu.: 250.8   1st Qu.:-0.686197   Class :character   #>  Median : 500.5   Median : 0.008579   Mode  :character   #>  Mean   : 500.5   Mean   : 0.004340                      #>  3rd Qu.: 750.2   3rd Qu.: 0.666959                      #>  Max.   :1000.0   Max.   : 2.755418                      summary(winsorized_df) #>        a                b                  c             #>  Min.   : 10.99   Min.   :-2.291499   Length:1000        #>  1st Qu.:250.75   1st Qu.:-0.686197   Class :character   #>  Median :500.50   Median : 0.008579   Mode  :character   #>  Mean   :500.50   Mean   : 0.003761                      #>  3rd Qu.:750.25   3rd Qu.: 0.666959                      #>  Max.   :990.01   Max.   : 2.223346                       winsorized_df <- treat_outliers(df, 0.05, by=\"c\") by(df, df$c, summary) #> df$c: A #>        a               b                 c             #>  Min.   :  1.0   Min.   :-2.93898   Length:211         #>  1st Qu.:195.5   1st Qu.:-0.67253   Class :character   #>  Median :424.0   Median : 0.05836   Mode  :character   #>  Mean   :454.5   Mean   :-0.01647                      #>  3rd Qu.:714.5   3rd Qu.: 0.62014                      #>  Max.   :997.0   Max.   : 2.65490                      #> ------------------------------------------------------------  #> df$c: B #>        a               b                 c             #>  Min.   :  4.0   Min.   :-2.64521   Length:196         #>  1st Qu.:316.0   1st Qu.:-0.65723   Class :character   #>  Median :514.5   Median :-0.03952   Mode  :character   #>  Mean   :522.3   Mean   : 0.05547                      #>  3rd Qu.:743.5   3rd Qu.: 0.69145                      #>  Max.   :998.0   Max.   : 2.75542                      #> ------------------------------------------------------------  #> df$c: C #>        a               b                 c             #>  Min.   : 17.0   Min.   :-2.49536   Length:195         #>  1st Qu.:265.5   1st Qu.:-0.85995   Class :character   #>  Median :508.0   Median : 0.00851   Mode  :character   #>  Mean   :514.1   Mean   :-0.03429                      #>  3rd Qu.:752.0   3rd Qu.: 0.81945                      #>  Max.   :986.0   Max.   : 2.15876                      #> ------------------------------------------------------------  #> df$c: D #>        a               b                 c             #>  Min.   :  7.0   Min.   :-2.80801   Length:188         #>  1st Qu.:240.8   1st Qu.:-0.56325   Class :character   #>  Median :489.0   Median : 0.07030   Mode  :character   #>  Mean   :488.9   Mean   : 0.04557                      #>  3rd Qu.:727.5   3rd Qu.: 0.64076                      #>  Max.   :994.0   Max.   : 2.48082                      #> ------------------------------------------------------------  #> df$c: E #>        a                b                 c             #>  Min.   :   2.0   Min.   :-2.39020   Length:210         #>  1st Qu.: 264.5   1st Qu.:-0.71428   Class :character   #>  Median : 538.0   Median :-0.07711   Mode  :character   #>  Mean   : 524.2   Mean   :-0.02350                      #>  3rd Qu.: 797.2   3rd Qu.: 0.64704                      #>  Max.   :1000.0   Max.   : 2.69237                      by(winsorized_df, df$c, summary) #> df$c: A #>        a               b                 c             #>  Min.   : 34.0   Min.   :-1.86553   Length:211         #>  1st Qu.:195.5   1st Qu.:-0.67253   Class :character   #>  Median :424.0   Median : 0.05836   Mode  :character   #>  Mean   :453.8   Mean   :-0.01338                      #>  3rd Qu.:714.5   3rd Qu.: 0.62014                      #>  Max.   :943.5   Max.   : 1.65662                      #> ------------------------------------------------------------  #> df$c: B #>        a               b                 c             #>  Min.   : 71.0   Min.   :-1.49200   Length:196         #>  1st Qu.:316.0   1st Qu.:-0.65723   Class :character   #>  Median :514.5   Median :-0.03952   Mode  :character   #>  Mean   :523.5   Mean   : 0.05128                      #>  3rd Qu.:743.5   3rd Qu.: 0.69145                      #>  Max.   :964.5   Max.   : 1.80135                      #> ------------------------------------------------------------  #> df$c: C #>        a               b                 c             #>  Min.   : 89.7   Min.   :-1.78623   Length:195         #>  1st Qu.:265.5   1st Qu.:-0.85995   Class :character   #>  Median :508.0   Median : 0.00851   Mode  :character   #>  Mean   :515.5   Mean   :-0.03373                      #>  3rd Qu.:752.0   3rd Qu.: 0.81945                      #>  Max.   :950.9   Max.   : 1.67637                      #> ------------------------------------------------------------  #> df$c: D #>        a                b                 c             #>  Min.   : 51.35   Min.   :-1.47564   Length:188         #>  1st Qu.:240.75   1st Qu.:-0.56325   Class :character   #>  Median :489.00   Median : 0.07030   Mode  :character   #>  Mean   :488.28   Mean   : 0.04023                      #>  3rd Qu.:727.50   3rd Qu.: 0.64076                      #>  Max.   :933.25   Max.   : 1.47381                      #> ------------------------------------------------------------  #> df$c: E #>        a               b                 c             #>  Min.   : 52.6   Min.   :-1.49300   Length:210         #>  1st Qu.:264.5   1st Qu.:-0.71428   Class :character   #>  Median :538.0   Median :-0.07711   Mode  :character   #>  Mean   :523.9   Mean   :-0.03049                      #>  3rd Qu.:797.2   3rd Qu.: 0.64704                      #>  Max.   :944.6   Max.   : 1.53394                       hist(treat_outliers(rnorm(1000)), breaks=100)"},{"path":"/dev/reference/worldbank.html","id":null,"dir":"Reference","previous_headings":"","what":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","title":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","text":"Data collected World Bank API using package wbstats.","code":""},{"path":"/dev/reference/worldbank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","text":"","code":"data(worldbank)"},{"path":"/dev/reference/worldbank.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","text":"object class \"data.frame\".","code":""},{"path":"/dev/reference/worldbank.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","text":"collected using wbstats::wb() function  World Bank API Dec 2020.  code generate data available  github repository package.  Use scientific studies advised without prior cleaning/checking.","code":""},{"path":"/dev/reference/worldbank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Snapshot of Macroeconomic Data as Provided by the World Bank API (1960 - 2018) — worldbank","text":"","code":"data(worldbank) prepare_missing_values_graph(worldbank, ts_id = \"year\")   data(worldbank_data_def) data(worldbank_var_def) data(ExPanD_config_worldbank) if (FALSE) {   ExPanD(worldbank, df_def = worldbank_data_def,     var_def = worldbank_var_def, config_list = ExPanD_config_worldbank) }"},{"path":"/dev/reference/worldbank_data_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Definitions for worldbank Data Set — worldbank_data_def","title":"Data Definitions for worldbank Data Set — worldbank_data_def","text":"data frame containing variable definitions worldbank data set. data definitions can passed ExPanD via df_def parameter.","code":""},{"path":"/dev/reference/worldbank_data_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Definitions for worldbank Data Set — worldbank_data_def","text":"","code":"data(worldbank_data_def)"},{"path":"/dev/reference/worldbank_data_def.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Definitions for worldbank Data Set — worldbank_data_def","text":"object class \"data.frame\".","code":""},{"path":"/dev/reference/worldbank_data_def.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Definitions for worldbank Data Set — worldbank_data_def","text":"Data definitions provided World Bank API code generate available  github repository  package.","code":""},{"path":"/dev/reference/worldbank_data_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Definitions for worldbank Data Set — worldbank_data_def","text":"","code":"data(worldbank) data(worldbank_data_def) data(worldbank_var_def) data(ExPanD_config_worldbank) if (FALSE) {   ExPanD(worldbank,df_def = worldbank_data_def,     var_def = worldbank_var_def, config_list = ExPanD_config_worldbank) }"},{"path":"/dev/reference/worldbank_var_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Definitions to Construct an Analysis Sample Based on the worldbank Data Set — worldbank_var_def","title":"Variable Definitions to Construct an Analysis Sample Based on the worldbank Data Set — worldbank_var_def","text":"data frame containing variable definitions can passed ExPanD via var_def parameter.","code":""},{"path":"/dev/reference/worldbank_var_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Definitions to Construct an Analysis Sample Based on the worldbank Data Set — worldbank_var_def","text":"","code":"data(worldbank_var_def)"},{"path":"/dev/reference/worldbank_var_def.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable Definitions to Construct an Analysis Sample Based on the worldbank Data Set — worldbank_var_def","text":"object class \"data.frame\".","code":""},{"path":"/dev/reference/worldbank_var_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Definitions to Construct an Analysis Sample Based on the worldbank Data Set — worldbank_var_def","text":"","code":"data(worldbank) data(worldbank_data_def) data(worldbank_var_def) data(ExPanD_config_worldbank) if (FALSE) {   ExPanD(worldbank, df_def = worldbank_data_def,     var_def = worldbank_var_def, config_list = ExPanD_config_worldbank) }"},{"path":"/dev/news/index.html","id":"expandar-0539000","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.5.3.9000","title":"ExPanDaR 0.5.3.9000","text":"Extensions: Added save_settings_option ExPanD() defaulting TRUE users can start app without settings dialog bottom (issue #8) Minor Issues: Switched back lfe prepare_regression_table() OLS regressions. lfeis back CRAN allows multiple fixed effects multi-level clustering. now run cmethod='reghdfe' make clustered standard errors consistent Stata’s reghdfe","code":""},{"path":"/dev/news/index.html","id":"expandar-053","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.5.3","title":"ExPanDaR 0.5.3","text":"CRAN release: 2020-12-06 Bug fixes: Fixed bug caused stargazer render plain OLS models","code":""},{"path":"/dev/news/index.html","id":"expandar-052","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.5.2","title":"ExPanDaR 0.5.2","text":"CRAN release: 2020-12-05 Extensions: Added prepare_by_group_trend_graph() function plot time trends grouping variable Included grouped time trend plots ExPanD() Bug fixes: Fixed notebook code sub sampling (failed sampling variables containing NAs) Fixed small issue Notebook generation code time trend quantile trend chunks Fixed display prepare_regression_table() logit model group tables fixed effects Minor Issues: Replaced lfe plm package fixed effect models lfe removed CRAN Removed wbstats Suggests currently CRAN Removed tidyquant package Suggests depends package requires R >= 3.5.0 Spelling","code":""},{"path":"/dev/news/index.html","id":"expandar-051","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.5.1","title":"ExPanDaR 0.5.1","text":"CRAN release: 2020-01-29 Extensions: Added vignette explain notebook export option ExPanD() resulting notebook Bug fixes: Fixed bug stopped ExPanD() displays rendering user uploaded panel data Minor Issues: Updated World Bank data Allowed ExPanD() called ts_id == NULL cs_id != NULL data frame variables can specified cross-sectional identifiers cross-sectional mode Removed artefacts cross-sectional mode cross-sectional time series identifiers still provided variable options ExPanD() app Included manual zip package import NAMESPACE make devtoools::check() happy various CRAN systems Changed shinyapps.io URLs vignettes plain HTTP win-builder seems issue SSL handshake shinyapps.io","code":""},{"path":"/dev/news/index.html","id":"expandar-050","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.5.0","title":"ExPanDaR 0.5.0","text":"CRAN release: 2020-01-10 Extensions: Modified ExPanD() process cross-sectional data useful defaults Implemented export option allows users download zip file containing data R notebook based variant ExPanD analysis (export_nb_option = TRUE) Minor issues: Added option ‘binary’ prepare_missing_values_graph() visualize whether values missing Typo fixes","code":""},{"path":"/dev/news/index.html","id":"expandar-040","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.4.0","title":"ExPanDaR 0.4.0","text":"CRAN release: 2019-04-06 Extensions: Introduced html_block tag components allow users add self-designed html content ExPanD() Added sample_selection, subset_factor, grouping udvars variables components ExPanD() parts can also re-arranged omitted Allowed user defined variables built analysis variables used simple_mode Added new vignette explain new features Bug fixes: Made Stata import robust Fixed hover code correlation scatter plots adjust img_css_ratio Minor issues: Removed non-ASCII characters NAMESPACE Allowed flexible handling binary variables ExPanD() Added additional examples Github repository (package) Updated World Bank data Switched openssl package (Thank Jeroen Ooms PR) Marginally improved error checking config upload","code":""},{"path":"/dev/news/index.html","id":"expandar-030","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.3.0","title":"ExPanDaR 0.3.0","text":"CRAN release: 2018-10-12 Extensions: Removed requirement least one non-numerical variable Added group violin plot Included ! .na() allowed functions user defined variables Introduced option change order reported components exclude selected components Added clustered standard errors fixed effects logit models prepare_regression_table() Implemented binary response logit models ExPanD() Bug fixes: Fixed sorting bug long variable definition construction Fixed bug ExPanD() extreme obs plot (sorting grouping variable) Minor issues: Removed dependency CodeDepends package Added rio package imports list Added packages used ExPanD() NAMESPACE make CRAN checks happy UI cleanups Fixed definition oint_ta r3 dataset Added check verify ts_id provided ordered vector Fixed typo worldbank_var_def Removed drop_undersore parameter prepare_regression_table() (longer needed) Work-around special characters stargazer column.labels Marginally improved error handling user provided data files Allowed treat_outliers() route parameters stats::quantile() (needed type parameter) Changed NA handling prepare_graph type functions","code":""},{"path":"/dev/news/index.html","id":"expandar-020","dir":"Changelog","previous_headings":"","what":"ExPanDaR 0.2.0","title":"ExPanDaR 0.2.0","text":"CRAN release: 2018-05-11 Initial version CRAN","code":""}]
